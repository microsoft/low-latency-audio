// 678341fe987a14a02a7119ff52438ac7 Generated file. Do not edit.
// File created by WPP compiler version 10.0.26100
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE RtPacketObject_cpp

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp64
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp66
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp74
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp101
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp115
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp117
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp118
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp128
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp157
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp158
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp159
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp160
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp161
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp162
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp171
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp184
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp211
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp224
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp249
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp260
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp276
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp308
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp321
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp322
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp330
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp387
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp401
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp402
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp424
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp425
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp518
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp532
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp533
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp559
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp578
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp583
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp589
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp615
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp629
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp630
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp652
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp653
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp686
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp700
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp701
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp719
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp738
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp744
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp748
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp753
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp772
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp774
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp799
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp819
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp831
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp837
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp856
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp858
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp863
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp886
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp901
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp920
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp925
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp926
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp928
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp950
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp971
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp977
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp997
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp1009
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RtPacketObject_cpp1013
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp64_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp64_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp64
# define WPP_ANNOTATE_RtPacketObject_cpp64 WPP_ANNOTATE_RtPacketObject_cpp64_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp64
# define WPP_ANNOTATE_RtPacketObject_cpp64 WPP_ANNOTATE_RtPacketObject_cpp64_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp64", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp64

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp66_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp66_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp66
# define WPP_ANNOTATE_RtPacketObject_cpp66 WPP_ANNOTATE_RtPacketObject_cpp66_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp66
# define WPP_ANNOTATE_RtPacketObject_cpp66 WPP_ANNOTATE_RtPacketObject_cpp66_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp66", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp66

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp74_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp74_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp74
# define WPP_ANNOTATE_RtPacketObject_cpp74 WPP_ANNOTATE_RtPacketObject_cpp74_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp74
# define WPP_ANNOTATE_RtPacketObject_cpp74 WPP_ANNOTATE_RtPacketObject_cpp74_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp74", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp74

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp101_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp101_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp101
# define WPP_ANNOTATE_RtPacketObject_cpp101 WPP_ANNOTATE_RtPacketObject_cpp101_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp101
# define WPP_ANNOTATE_RtPacketObject_cpp101 WPP_ANNOTATE_RtPacketObject_cpp101_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp101", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp101

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp115_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp115_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp115
# define WPP_ANNOTATE_RtPacketObject_cpp115 WPP_ANNOTATE_RtPacketObject_cpp115_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp115
# define WPP_ANNOTATE_RtPacketObject_cpp115 WPP_ANNOTATE_RtPacketObject_cpp115_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp115", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp115

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp117_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=dataFormat == nullptr RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp117_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=dataFormat == nullptr RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp117
# define WPP_ANNOTATE_RtPacketObject_cpp117 WPP_ANNOTATE_RtPacketObject_cpp117_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp117
# define WPP_ANNOTATE_RtPacketObject_cpp117 WPP_ANNOTATE_RtPacketObject_cpp117_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp117", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp117

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp118_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=!IsEqualGUID(KSDATAFORMAT_TYPE_AUDIO, AcxDataFormatGetMajorFormat(dataFormat)) RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp118_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=!IsEqualGUID(KSDATAFORMAT_TYPE_AUDIO, AcxDataFormatGetMajorFormat(dataFormat)) RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp118
# define WPP_ANNOTATE_RtPacketObject_cpp118 WPP_ANNOTATE_RtPacketObject_cpp118_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp118
# define WPP_ANNOTATE_RtPacketObject_cpp118 WPP_ANNOTATE_RtPacketObject_cpp118_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp118", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp118

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp128_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 - waveFormatEx = %10!p!, waveFormatExtensible = %11!p!, waveFormatExtensibleIEC61937 = %12!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp128_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 - waveFormatEx = %10!p!, waveFormatExtensible = %11!p!, waveFormatExtensibleIEC61937 = %12!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp128
# define WPP_ANNOTATE_RtPacketObject_cpp128 WPP_ANNOTATE_RtPacketObject_cpp128_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp128
# define WPP_ANNOTATE_RtPacketObject_cpp128 WPP_ANNOTATE_RtPacketObject_cpp128_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp128", \
    L"{", \
    L"waveFormatEx, ItemPtr -- 10" , \
    L"waveFormatExtensible, ItemPtr -- 11" , \
    L"waveFormatExtensibleIEC61937, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp128

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp157_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 - wFormatTag      = 0x%10!x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp157_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 - wFormatTag      = 0x%10!x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp157
# define WPP_ANNOTATE_RtPacketObject_cpp157 WPP_ANNOTATE_RtPacketObject_cpp157_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp157
# define WPP_ANNOTATE_RtPacketObject_cpp157 WPP_ANNOTATE_RtPacketObject_cpp157_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp157", \
    L"{", \
    L"waveFormat->wFormatTag, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp157

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp158_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 - nChannels       = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp158_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 - nChannels       = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp158
# define WPP_ANNOTATE_RtPacketObject_cpp158 WPP_ANNOTATE_RtPacketObject_cpp158_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp158
# define WPP_ANNOTATE_RtPacketObject_cpp158 WPP_ANNOTATE_RtPacketObject_cpp158_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp158", \
    L"{", \
    L"waveFormat->nChannels, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp158

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp159_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 - nSamplesPerSec  = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp159_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 - nSamplesPerSec  = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp159
# define WPP_ANNOTATE_RtPacketObject_cpp159 WPP_ANNOTATE_RtPacketObject_cpp159_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp159
# define WPP_ANNOTATE_RtPacketObject_cpp159 WPP_ANNOTATE_RtPacketObject_cpp159_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp159", \
    L"{", \
    L"waveFormat->nSamplesPerSec, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp159

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp160_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 - nAvgBytesPerSec = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp160_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 - nAvgBytesPerSec = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp160
# define WPP_ANNOTATE_RtPacketObject_cpp160 WPP_ANNOTATE_RtPacketObject_cpp160_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp160
# define WPP_ANNOTATE_RtPacketObject_cpp160 WPP_ANNOTATE_RtPacketObject_cpp160_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp160", \
    L"{", \
    L"waveFormat->nAvgBytesPerSec, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp160

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp161_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 - nBlockAlign     = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp161_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 - nBlockAlign     = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp161
# define WPP_ANNOTATE_RtPacketObject_cpp161 WPP_ANNOTATE_RtPacketObject_cpp161_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp161
# define WPP_ANNOTATE_RtPacketObject_cpp161 WPP_ANNOTATE_RtPacketObject_cpp161_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp161", \
    L"{", \
    L"waveFormat->nBlockAlign, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp161

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp162_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 - wBitsPerSample  = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp162_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 - wBitsPerSample  = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp162
# define WPP_ANNOTATE_RtPacketObject_cpp162 WPP_ANNOTATE_RtPacketObject_cpp162_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp162
# define WPP_ANNOTATE_RtPacketObject_cpp162 WPP_ANNOTATE_RtPacketObject_cpp162_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp162", \
    L"{", \
    L"waveFormat->wBitsPerSample, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp162

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp171_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp171_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp171
# define WPP_ANNOTATE_RtPacketObject_cpp171 WPP_ANNOTATE_RtPacketObject_cpp171_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp171
# define WPP_ANNOTATE_RtPacketObject_cpp171 WPP_ANNOTATE_RtPacketObject_cpp171_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp171", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp171

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp184_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0%!FUNC! Entry, %10!s!, %11!d!, %12!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp184_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0%!FUNC! Entry, %10!s!, %11!d!, %12!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp184
# define WPP_ANNOTATE_RtPacketObject_cpp184 WPP_ANNOTATE_RtPacketObject_cpp184_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp184
# define WPP_ANNOTATE_RtPacketObject_cpp184 WPP_ANNOTATE_RtPacketObject_cpp184_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp184", \
    L"{", \
    L"(direction == IsoDirection::Out) ? 'eIsoOut' : 'In', ItemString -- 10" , \
    L"isoPacketSize, ItemLong -- 11" , \
    L"numIsoPackets, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp184

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp211_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp211_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp211
# define WPP_ANNOTATE_RtPacketObject_cpp211 WPP_ANNOTATE_RtPacketObject_cpp211_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp211
# define WPP_ANNOTATE_RtPacketObject_cpp211 WPP_ANNOTATE_RtPacketObject_cpp211_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp211", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp211

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp224_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp224_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp224
# define WPP_ANNOTATE_RtPacketObject_cpp224 WPP_ANNOTATE_RtPacketObject_cpp224_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp224
# define WPP_ANNOTATE_RtPacketObject_cpp224 WPP_ANNOTATE_RtPacketObject_cpp224_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp224", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp224

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp249_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp249_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp249
# define WPP_ANNOTATE_RtPacketObject_cpp249 WPP_ANNOTATE_RtPacketObject_cpp249_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp249
# define WPP_ANNOTATE_RtPacketObject_cpp249 WPP_ANNOTATE_RtPacketObject_cpp249_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp249", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp249

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp260_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp260_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp260
# define WPP_ANNOTATE_RtPacketObject_cpp260 WPP_ANNOTATE_RtPacketObject_cpp260_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp260
# define WPP_ANNOTATE_RtPacketObject_cpp260 WPP_ANNOTATE_RtPacketObject_cpp260_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp260", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp260

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp276_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp276_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp276
# define WPP_ANNOTATE_RtPacketObject_cpp276 WPP_ANNOTATE_RtPacketObject_cpp276_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp276
# define WPP_ANNOTATE_RtPacketObject_cpp276 WPP_ANNOTATE_RtPacketObject_cpp276_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp276", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp276

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp308_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0%!FUNC! Entry, %10!s!, rtPacketsCount = %11!d!, rtPacketSize = %12!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp308_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0%!FUNC! Entry, %10!s!, rtPacketsCount = %11!d!, rtPacketSize = %12!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp308
# define WPP_ANNOTATE_RtPacketObject_cpp308 WPP_ANNOTATE_RtPacketObject_cpp308_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp308
# define WPP_ANNOTATE_RtPacketObject_cpp308 WPP_ANNOTATE_RtPacketObject_cpp308_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp308", \
    L"{", \
    L"isInput ? 'Input' : 'Output', ItemString -- 10" , \
    L"rtPacketsCount, ItemLong -- 11" , \
    L"rtPacketSize, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp308

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp321_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp321_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp321
# define WPP_ANNOTATE_RtPacketObject_cpp321 WPP_ANNOTATE_RtPacketObject_cpp321_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp321
# define WPP_ANNOTATE_RtPacketObject_cpp321 WPP_ANNOTATE_RtPacketObject_cpp321_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp321", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp321

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp322_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=rtPacketInfo[deviceIndex].RtPackets != nullptr RETSTATUS=STATUS_INVALID_DEVICE_STATE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp322_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=rtPacketInfo[deviceIndex].RtPackets != nullptr RETSTATUS=STATUS_INVALID_DEVICE_STATE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp322
# define WPP_ANNOTATE_RtPacketObject_cpp322 WPP_ANNOTATE_RtPacketObject_cpp322_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp322
# define WPP_ANNOTATE_RtPacketObject_cpp322 WPP_ANNOTATE_RtPacketObject_cpp322_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp322", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp322

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp330_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp330_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp330
# define WPP_ANNOTATE_RtPacketObject_cpp330 WPP_ANNOTATE_RtPacketObject_cpp330_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp330
# define WPP_ANNOTATE_RtPacketObject_cpp330 WPP_ANNOTATE_RtPacketObject_cpp330_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp330", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp330

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp387_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0%!FUNC! Entry, RtPacketPosition, rtPacketSize, rtPacketsCount = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp387_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0%!FUNC! Entry, RtPacketPosition, rtPacketSize, rtPacketsCount = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp387
# define WPP_ANNOTATE_RtPacketObject_cpp387 WPP_ANNOTATE_RtPacketObject_cpp387_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp387
# define WPP_ANNOTATE_RtPacketObject_cpp387 WPP_ANNOTATE_RtPacketObject_cpp387_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp387", \
    L"{", \
    L"m_outputRtPacketInfo[deviceIndex].RtPacketPosition, ItemULongLong -- 10" , \
    L"m_outputRtPacketInfo[deviceIndex].RtPacketSize, ItemLong -- 11" , \
    L"m_outputRtPacketInfo[deviceIndex].RtPacketsCount, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp387

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp401_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 - TransferredBytesInThisIrp = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp401_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 - TransferredBytesInThisIrp = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp401
# define WPP_ANNOTATE_RtPacketObject_cpp401 WPP_ANNOTATE_RtPacketObject_cpp401_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp401
# define WPP_ANNOTATE_RtPacketObject_cpp401 WPP_ANNOTATE_RtPacketObject_cpp401_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp401", \
    L"{", \
    L"transferObject->GetTransferredBytesInThisIrp(), ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp401

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp402_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 - m_outputRtPacketInfo[deviceIndex].rtPacketSize = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp402_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 - m_outputRtPacketInfo[deviceIndex].rtPacketSize = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp402
# define WPP_ANNOTATE_RtPacketObject_cpp402 WPP_ANNOTATE_RtPacketObject_cpp402_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp402
# define WPP_ANNOTATE_RtPacketObject_cpp402 WPP_ANNOTATE_RtPacketObject_cpp402_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp402", \
    L"{", \
    L"m_outputRtPacketInfo[deviceIndex].RtPacketSize, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp402

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp424_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp424_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp424
# define WPP_ANNOTATE_RtPacketObject_cpp424 WPP_ANNOTATE_RtPacketObject_cpp424_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp424
# define WPP_ANNOTATE_RtPacketObject_cpp424 WPP_ANNOTATE_RtPacketObject_cpp424_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp424", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"srcIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp424

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp425_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 - dstData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp425_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 - dstData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp425
# define WPP_ANNOTATE_RtPacketObject_cpp425 WPP_ANNOTATE_RtPacketObject_cpp425_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp425
# define WPP_ANNOTATE_RtPacketObject_cpp425 WPP_ANNOTATE_RtPacketObject_cpp425_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp425", \
    L"{", \
    L"dstData, ItemPtr -- 10" , \
    L"buffer, ItemPtr -- 11" , \
    L"length, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp425

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp518_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp518_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp518
# define WPP_ANNOTATE_RtPacketObject_cpp518 WPP_ANNOTATE_RtPacketObject_cpp518_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp518
# define WPP_ANNOTATE_RtPacketObject_cpp518 WPP_ANNOTATE_RtPacketObject_cpp518_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp518", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"srcIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp518

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp532_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp532_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp532
# define WPP_ANNOTATE_RtPacketObject_cpp532 WPP_ANNOTATE_RtPacketObject_cpp532_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp532
# define WPP_ANNOTATE_RtPacketObject_cpp532 WPP_ANNOTATE_RtPacketObject_cpp532_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp532", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"srcIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp532

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp533_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 - dstData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp533_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 - dstData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp533
# define WPP_ANNOTATE_RtPacketObject_cpp533 WPP_ANNOTATE_RtPacketObject_cpp533_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp533
# define WPP_ANNOTATE_RtPacketObject_cpp533 WPP_ANNOTATE_RtPacketObject_cpp533_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp533", \
    L"{", \
    L"dstData, ItemPtr -- 10" , \
    L"buffer, ItemPtr -- 11" , \
    L"length, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp533

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp559_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp559_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 - acxCh, rtPacketIndex, srcIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp559
# define WPP_ANNOTATE_RtPacketObject_cpp559 WPP_ANNOTATE_RtPacketObject_cpp559_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp559
# define WPP_ANNOTATE_RtPacketObject_cpp559 WPP_ANNOTATE_RtPacketObject_cpp559_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp559", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"srcIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp559

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp578_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 - completedRtPacket, estimatedQPCPosition, qpcPosition, PeriodQPCPosition, bytesCopiedUpToBoundary, TransferredBytesInThisIrp, %10!I64u!, %11!I64u!, %12!I64u!, %13!I64u!, %14!u!, %15!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp578_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 - completedRtPacket, estimatedQPCPosition, qpcPosition, PeriodQPCPosition, bytesCopiedUpToBoundary, TransferredBytesInThisIrp, %10!I64u!, %11!I64u!, %12!I64u!, %13!I64u!, %14!u!, %15!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp578
# define WPP_ANNOTATE_RtPacketObject_cpp578 WPP_ANNOTATE_RtPacketObject_cpp578_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"Arg, ItemULongLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp578
# define WPP_ANNOTATE_RtPacketObject_cpp578 WPP_ANNOTATE_RtPacketObject_cpp578_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp578", \
    L"{", \
    L"completedRtPacket, ItemULongLong -- 10" , \
    L"estimatedQPCPosition, ItemULongLong -- 11" , \
    L"transferObject->GetQPCPosition(), ItemULongLong -- 12" , \
    L"transferObject->GetPeriodQPCPosition(), ItemULongLong -- 13" , \
    L"bytesCopiedUpToBoundary, ItemLong -- 14" , \
    L"transferObject->GetTransferredBytesInThisIrp(), ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp578

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp583_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0call AcxRtStreamNotifyPacketComplete(%10!p!, %11!I64u!, %12!I64u!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp583_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0call AcxRtStreamNotifyPacketComplete(%10!p!, %11!I64u!, %12!I64u!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp583
# define WPP_ANNOTATE_RtPacketObject_cpp583 WPP_ANNOTATE_RtPacketObject_cpp583_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp583
# define WPP_ANNOTATE_RtPacketObject_cpp583 WPP_ANNOTATE_RtPacketObject_cpp583_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp583", \
    L"{", \
    L"m_deviceContext->RenderStreamEngine[deviceIndex] != nullptr ? m_deviceContext->RenderStreamEngine[deviceIndex]->GetACXStream() : (void *)(1), ItemPtr -- 10" , \
    L"completedRtPacket, ItemULongLong -- 11" , \
    L"estimatedQPCPosition, ItemULongLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp583

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp589_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%!FUNC! Exit, RtPacketPosition, bytesCopiedSrcData, bytesCopiedUpToBoundary = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp589_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%!FUNC! Exit, RtPacketPosition, bytesCopiedSrcData, bytesCopiedUpToBoundary = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp589
# define WPP_ANNOTATE_RtPacketObject_cpp589 WPP_ANNOTATE_RtPacketObject_cpp589_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp589
# define WPP_ANNOTATE_RtPacketObject_cpp589 WPP_ANNOTATE_RtPacketObject_cpp589_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp589", \
    L"{", \
    L"rtPacketInfo->RtPacketPosition, ItemULongLong -- 10" , \
    L"bytesCopiedSrcData, ItemLong -- 11" , \
    L"bytesCopiedUpToBoundary, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp589

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp615_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0%!FUNC! Entry, RtPacketPosition, rtPacketSize, rtPacketsCount = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp615_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0%!FUNC! Entry, RtPacketPosition, rtPacketSize, rtPacketsCount = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp615
# define WPP_ANNOTATE_RtPacketObject_cpp615 WPP_ANNOTATE_RtPacketObject_cpp615_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp615
# define WPP_ANNOTATE_RtPacketObject_cpp615 WPP_ANNOTATE_RtPacketObject_cpp615_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp615", \
    L"{", \
    L"m_inputRtPacketInfo[deviceIndex].RtPacketPosition, ItemULongLong -- 10" , \
    L"m_inputRtPacketInfo[deviceIndex].RtPacketSize, ItemLong -- 11" , \
    L"m_inputRtPacketInfo[deviceIndex].RtPacketsCount, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp615

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp629_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 - TransferredBytesInThisIrp = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp629_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 - TransferredBytesInThisIrp = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp629
# define WPP_ANNOTATE_RtPacketObject_cpp629 WPP_ANNOTATE_RtPacketObject_cpp629_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp629
# define WPP_ANNOTATE_RtPacketObject_cpp629 WPP_ANNOTATE_RtPacketObject_cpp629_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp629", \
    L"{", \
    L"transferObject->GetTransferredBytesInThisIrp(), ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp629

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp630_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 - m_inputRtPacketInfo[deviceIndex].rtPacketSize = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp630_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 - m_inputRtPacketInfo[deviceIndex].rtPacketSize = %10!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp630
# define WPP_ANNOTATE_RtPacketObject_cpp630 WPP_ANNOTATE_RtPacketObject_cpp630_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp630
# define WPP_ANNOTATE_RtPacketObject_cpp630 WPP_ANNOTATE_RtPacketObject_cpp630_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp630", \
    L"{", \
    L"m_inputRtPacketInfo[deviceIndex].RtPacketSize, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp630

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp652_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp652_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp652
# define WPP_ANNOTATE_RtPacketObject_cpp652 WPP_ANNOTATE_RtPacketObject_cpp652_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp652
# define WPP_ANNOTATE_RtPacketObject_cpp652 WPP_ANNOTATE_RtPacketObject_cpp652_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp652", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"dstIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp652

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp653_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 - srcData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp653_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 - srcData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp653
# define WPP_ANNOTATE_RtPacketObject_cpp653 WPP_ANNOTATE_RtPacketObject_cpp653_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp653
# define WPP_ANNOTATE_RtPacketObject_cpp653 WPP_ANNOTATE_RtPacketObject_cpp653_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp653", \
    L"{", \
    L"srcData, ItemPtr -- 10" , \
    L"buffer, ItemPtr -- 11" , \
    L"length, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp653

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp686_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp686_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp686
# define WPP_ANNOTATE_RtPacketObject_cpp686 WPP_ANNOTATE_RtPacketObject_cpp686_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp686
# define WPP_ANNOTATE_RtPacketObject_cpp686 WPP_ANNOTATE_RtPacketObject_cpp686_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp686", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"dstIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp686

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp700_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp700_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp700
# define WPP_ANNOTATE_RtPacketObject_cpp700 WPP_ANNOTATE_RtPacketObject_cpp700_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp700
# define WPP_ANNOTATE_RtPacketObject_cpp700 WPP_ANNOTATE_RtPacketObject_cpp700_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp700", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"dstIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp700

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp701_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 - srcData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp701_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 - srcData, buffer, length = %10!p!, %11!p!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp701
# define WPP_ANNOTATE_RtPacketObject_cpp701 WPP_ANNOTATE_RtPacketObject_cpp701_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp701
# define WPP_ANNOTATE_RtPacketObject_cpp701 WPP_ANNOTATE_RtPacketObject_cpp701_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp701", \
    L"{", \
    L"srcData, ItemPtr -- 10" , \
    L"buffer, ItemPtr -- 11" , \
    L"length, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp701

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp719_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp719_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 - acxCh, rtPacketIndex, dstIndexInRtPacket, %10!u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp719
# define WPP_ANNOTATE_RtPacketObject_cpp719 WPP_ANNOTATE_RtPacketObject_cpp719_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp719
# define WPP_ANNOTATE_RtPacketObject_cpp719 WPP_ANNOTATE_RtPacketObject_cpp719_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp719", \
    L"{", \
    L"acxCh, ItemLong -- 10" , \
    L"rtPacketIndex, ItemLong -- 11" , \
    L"dstIndexInRtPacket, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp719

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp738_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 - completedRtPacket, estimatedQPCPosition, qpcPosition, PeriodQPCPosition, bytesCopiedUpToBoundary, TransferredBytesInThisIrp, m_index, %10!I64u!, %11!I64u!, %12!I64u!, %13!I64u!, %14!u!, %15!u!, %16!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp738_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 - completedRtPacket, estimatedQPCPosition, qpcPosition, PeriodQPCPosition, bytesCopiedUpToBoundary, TransferredBytesInThisIrp, m_index, %10!I64u!, %11!I64u!, %12!I64u!, %13!I64u!, %14!u!, %15!u!, %16!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp738
# define WPP_ANNOTATE_RtPacketObject_cpp738 WPP_ANNOTATE_RtPacketObject_cpp738_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"Arg, ItemULongLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp738
# define WPP_ANNOTATE_RtPacketObject_cpp738 WPP_ANNOTATE_RtPacketObject_cpp738_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp738", \
    L"{", \
    L"completedRtPacket, ItemULongLong -- 10" , \
    L"estimatedQPCPosition, ItemULongLong -- 11" , \
    L"transferObject->GetQPCPosition(), ItemULongLong -- 12" , \
    L"transferObject->GetPeriodQPCPosition(), ItemULongLong -- 13" , \
    L"bytesCopiedUpToBoundary, ItemLong -- 14" , \
    L"transferObject->GetTransferredBytesInThisIrp(), ItemLong -- 15" , \
    L"transferObject->GetIndex(), ItemLong -- 16" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp738

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp744_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0call AcxRtStreamNotifyPacketComplete(%10!p!, %11!I64u!, %12!I64u!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp744_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0call AcxRtStreamNotifyPacketComplete(%10!p!, %11!I64u!, %12!I64u!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp744
# define WPP_ANNOTATE_RtPacketObject_cpp744 WPP_ANNOTATE_RtPacketObject_cpp744_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp744
# define WPP_ANNOTATE_RtPacketObject_cpp744 WPP_ANNOTATE_RtPacketObject_cpp744_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp744", \
    L"{", \
    L"m_deviceContext->CaptureStreamEngine[deviceIndex] != nullptr ? m_deviceContext->CaptureStreamEngine[deviceIndex]->GetACXStream() : (void *)(1), ItemPtr -- 10" , \
    L"completedRtPacket, ItemULongLong -- 11" , \
    L"estimatedQPCPosition, ItemULongLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp744

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp748_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0can't call AcxRtStreamNotifyPacketComplete, %10!p!, %11!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp748_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0can't call AcxRtStreamNotifyPacketComplete, %10!p!, %11!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp748
# define WPP_ANNOTATE_RtPacketObject_cpp748 WPP_ANNOTATE_RtPacketObject_cpp748_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemPtr -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp748
# define WPP_ANNOTATE_RtPacketObject_cpp748 WPP_ANNOTATE_RtPacketObject_cpp748_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp748", \
    L"{", \
    L"m_deviceContext->CaptureStreamEngine, ItemPtr -- 10" , \
    L"(m_deviceContext->CaptureStreamEngine != nullptr) ? m_deviceContext->CaptureStreamEngine[deviceIndex]->GetACXStream() : nullptr, ItemPtr -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp748

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp753_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0%!FUNC! Exit, RtPacketPosition, bytesCopiedUpToBoundary, bytesCopiedDstData = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp753_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0%!FUNC! Exit, RtPacketPosition, bytesCopiedUpToBoundary, bytesCopiedDstData = %10!I64u!, %11!u!, %12!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp753
# define WPP_ANNOTATE_RtPacketObject_cpp753 WPP_ANNOTATE_RtPacketObject_cpp753_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp753
# define WPP_ANNOTATE_RtPacketObject_cpp753 WPP_ANNOTATE_RtPacketObject_cpp753_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp753", \
    L"{", \
    L"rtPacketInfo->RtPacketPosition, ItemULongLong -- 10" , \
    L"bytesCopiedUpToBoundary, ItemLong -- 11" , \
    L"bytesCopiedDstData, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp753

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp772_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp772_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp772
# define WPP_ANNOTATE_RtPacketObject_cpp772 WPP_ANNOTATE_RtPacketObject_cpp772_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp772
# define WPP_ANNOTATE_RtPacketObject_cpp772 WPP_ANNOTATE_RtPacketObject_cpp772_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp772", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp772

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp774_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= (isInput ? m_numOfInputDevices : m_numOfOutputDevices) RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp774_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= (isInput ? m_numOfInputDevices : m_numOfOutputDevices) RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp774
# define WPP_ANNOTATE_RtPacketObject_cpp774 WPP_ANNOTATE_RtPacketObject_cpp774_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp774
# define WPP_ANNOTATE_RtPacketObject_cpp774 WPP_ANNOTATE_RtPacketObject_cpp774_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp774", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp774

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp799_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp799_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp799
# define WPP_ANNOTATE_RtPacketObject_cpp799 WPP_ANNOTATE_RtPacketObject_cpp799_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp799
# define WPP_ANNOTATE_RtPacketObject_cpp799 WPP_ANNOTATE_RtPacketObject_cpp799_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp799", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp799

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp819_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp819_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp819
# define WPP_ANNOTATE_RtPacketObject_cpp819 WPP_ANNOTATE_RtPacketObject_cpp819_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp819
# define WPP_ANNOTATE_RtPacketObject_cpp819 WPP_ANNOTATE_RtPacketObject_cpp819_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp819", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp819

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp831_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp831_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp831
# define WPP_ANNOTATE_RtPacketObject_cpp831 WPP_ANNOTATE_RtPacketObject_cpp831_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp831
# define WPP_ANNOTATE_RtPacketObject_cpp831 WPP_ANNOTATE_RtPacketObject_cpp831_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp831", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp831

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp837_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp837_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp837
# define WPP_ANNOTATE_RtPacketObject_cpp837 WPP_ANNOTATE_RtPacketObject_cpp837_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp837
# define WPP_ANNOTATE_RtPacketObject_cpp837 WPP_ANNOTATE_RtPacketObject_cpp837_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp837", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp837

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp856_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp856_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp856
# define WPP_ANNOTATE_RtPacketObject_cpp856 WPP_ANNOTATE_RtPacketObject_cpp856_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp856
# define WPP_ANNOTATE_RtPacketObject_cpp856 WPP_ANNOTATE_RtPacketObject_cpp856_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp856", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp856

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp858_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= m_numOfInputDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp858_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= m_numOfInputDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp858
# define WPP_ANNOTATE_RtPacketObject_cpp858 WPP_ANNOTATE_RtPacketObject_cpp858_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp858
# define WPP_ANNOTATE_RtPacketObject_cpp858 WPP_ANNOTATE_RtPacketObject_cpp858_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp858", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp858

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp863_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp863_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp863
# define WPP_ANNOTATE_RtPacketObject_cpp863 WPP_ANNOTATE_RtPacketObject_cpp863_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp863
# define WPP_ANNOTATE_RtPacketObject_cpp863 WPP_ANNOTATE_RtPacketObject_cpp863_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp863", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp863

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp886_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp886_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp886
# define WPP_ANNOTATE_RtPacketObject_cpp886 WPP_ANNOTATE_RtPacketObject_cpp886_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp886
# define WPP_ANNOTATE_RtPacketObject_cpp886 WPP_ANNOTATE_RtPacketObject_cpp886_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp886", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp886

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp901_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp901_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=deviceIndex >= numOfDevices RETSTATUS=STATUS_INVALID_PARAMETER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp901
# define WPP_ANNOTATE_RtPacketObject_cpp901 WPP_ANNOTATE_RtPacketObject_cpp901_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp901
# define WPP_ANNOTATE_RtPacketObject_cpp901 WPP_ANNOTATE_RtPacketObject_cpp901_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp901", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp901

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp920_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=blockAlign == 0 RETSTATUS=STATUS_UNSUCCESSFUL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp920_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0 File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog POSCOND=blockAlign == 0 RETSTATUS=STATUS_UNSUCCESSFUL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp920
# define WPP_ANNOTATE_RtPacketObject_cpp920 WPP_ANNOTATE_RtPacketObject_cpp920_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp920
# define WPP_ANNOTATE_RtPacketObject_cpp920 WPP_ANNOTATE_RtPacketObject_cpp920_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp920", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp920

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp925_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0 - *positionInBlocks, rtPacketPosition, bytesPerSecond, blockAlign = %10!I64u!, %11!I64u!, %12!u!, %13!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp925_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0 - *positionInBlocks, rtPacketPosition, bytesPerSecond, blockAlign = %10!I64u!, %11!I64u!, %12!u!, %13!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp925
# define WPP_ANNOTATE_RtPacketObject_cpp925 WPP_ANNOTATE_RtPacketObject_cpp925_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp925
# define WPP_ANNOTATE_RtPacketObject_cpp925 WPP_ANNOTATE_RtPacketObject_cpp925_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp925", \
    L"{", \
    L"*positionInBlocks, ItemULongLong -- 10" , \
    L"rtPacketPosition, ItemULongLong -- 11" , \
    L"bytesPerSecond, ItemLong -- 12" , \
    L"blockAlign, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp925

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp926_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0 - *qpcPosition = %10!I64u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp926_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0 - *qpcPosition = %10!I64u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp926
# define WPP_ANNOTATE_RtPacketObject_cpp926 WPP_ANNOTATE_RtPacketObject_cpp926_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp926
# define WPP_ANNOTATE_RtPacketObject_cpp926 WPP_ANNOTATE_RtPacketObject_cpp926_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp926", \
    L"{", \
    L"*qpcPosition, ItemULongLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp926

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp928_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp928_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp928
# define WPP_ANNOTATE_RtPacketObject_cpp928 WPP_ANNOTATE_RtPacketObject_cpp928_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp928
# define WPP_ANNOTATE_RtPacketObject_cpp928 WPP_ANNOTATE_RtPacketObject_cpp928_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp928", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp928

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp950_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp950_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp950
# define WPP_ANNOTATE_RtPacketObject_cpp950 WPP_ANNOTATE_RtPacketObject_cpp950_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp950
# define WPP_ANNOTATE_RtPacketObject_cpp950 WPP_ANNOTATE_RtPacketObject_cpp950_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp950", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp950

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp971_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfMemoryCreate(&attributes, NonPagedPoolNx, DRIVER_TAG, sizeof(RT_PACKET_INFO) * numOfInputDevices, &inputRtPacketInfoMemory, (PVOID *)&inputRtPacketInfo)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp971_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfMemoryCreate(&attributes, NonPagedPoolNx, DRIVER_TAG, sizeof(RT_PACKET_INFO) * numOfInputDevices, &inputRtPacketInfoMemory, (PVOID *)&inputRtPacketInfo)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp971
# define WPP_ANNOTATE_RtPacketObject_cpp971 WPP_ANNOTATE_RtPacketObject_cpp971_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp971
# define WPP_ANNOTATE_RtPacketObject_cpp971 WPP_ANNOTATE_RtPacketObject_cpp971_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp971", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp971

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp977_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 77 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfMemoryCreate(&attributes, NonPagedPoolNx, DRIVER_TAG, sizeof(RT_PACKET_INFO) * numOfOutputDevices, &outputRtPacketInfoMemory, (PVOID *)&outputRtPacketInfo)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp977_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 77 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfMemoryCreate(&attributes, NonPagedPoolNx, DRIVER_TAG, sizeof(RT_PACKET_INFO) * numOfOutputDevices, &outputRtPacketInfoMemory, (PVOID *)&outputRtPacketInfo)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp977
# define WPP_ANNOTATE_RtPacketObject_cpp977 WPP_ANNOTATE_RtPacketObject_cpp977_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp977
# define WPP_ANNOTATE_RtPacketObject_cpp977 WPP_ANNOTATE_RtPacketObject_cpp977_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp977", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp977

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp997_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 78 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfSpinLockCreate(&attributes, &m_inputRtPacketInfo[deviceIndex].PositionSpinLock)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp997_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 78 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfSpinLockCreate(&attributes, &m_inputRtPacketInfo[deviceIndex].PositionSpinLock)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp997
# define WPP_ANNOTATE_RtPacketObject_cpp997 WPP_ANNOTATE_RtPacketObject_cpp997_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp997
# define WPP_ANNOTATE_RtPacketObject_cpp997 WPP_ANNOTATE_RtPacketObject_cpp997_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp997", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp997

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp1009_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 79 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfSpinLockCreate(&attributes, &m_outputRtPacketInfo[deviceIndex].PositionSpinLock)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp1009_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 79 \"%0ERROR: File:%10!s!, Line:%11!d! - status=%12!s!\" //   LEVEL=LEVEL_ERROR FLAGS=FLAG_DEVICE_ALL IFRLOG=g_AudioDspLog RETSTATUS=WdfSpinLockCreate(&attributes, &m_outputRtPacketInfo[deviceIndex].PositionSpinLock)" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp1009
# define WPP_ANNOTATE_RtPacketObject_cpp1009 WPP_ANNOTATE_RtPacketObject_cpp1009_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp1009
# define WPP_ANNOTATE_RtPacketObject_cpp1009 WPP_ANNOTATE_RtPacketObject_cpp1009_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp1009", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"__statusRet, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp1009

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp1013_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 80 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RtPacketObject_cpp1013_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"8389ed54-3e37-3ac8-f0a7-a9a974314fc9 uac2-driver // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 80 \"%0%!FUNC! Exit %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_DRIVER" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RtPacketObject_cpp1013
# define WPP_ANNOTATE_RtPacketObject_cpp1013 WPP_ANNOTATE_RtPacketObject_cpp1013_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RtPacketObject_cpp1013
# define WPP_ANNOTATE_RtPacketObject_cpp1013 WPP_ANNOTATE_RtPacketObject_cpp1013_FINAL( \
    "TMF:", \
    "RtPacketObject.cpp", \
    "RtPacketObject_cpp1013", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RtPacketObject_cpp1013

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_8389ed543e373ac8f0a7a9a974314fc9_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x8389ed54,0x3e37,0x3ac8,{0xf0,0xa7,0xa9,0xa9,0x74,0x31,0x4f,0xc9}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF__def
# define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  (void*)0); }
#endif // WPP_SF__def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF__def
#define WPP_RECORDER_AND_TRACE_SF__def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                    (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF__def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_ function
//
#ifndef WPP_RECORDER_SF__def
#define WPP_RECORDER_SF__def
WPP_INLINE
VOID
WPP_RECORDER_SF_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
             (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0);
}
#endif // WPP_RECORDER_SF__def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_D_def
# define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0); }
#endif // WPP_SF_D_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_D function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_D_def
#define WPP_RECORDER_AND_TRACE_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_D(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_D_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_D function
//
#ifndef WPP_RECORDER_SF_D_def
#define WPP_RECORDER_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_SF_D(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_D_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDD_def
# define WPP_SF_DDD_def
WPP_INLINE void WPP_SF_DDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_DDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDD_def
#define WPP_RECORDER_AND_TRACE_SF_DDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDD function
//
#ifndef WPP_RECORDER_SF_DDD_def
#define WPP_RECORDER_SF_DDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_I_def
# define WPP_SF_I_def
WPP_INLINE void WPP_SF_I(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1)  (void*)0); }
#endif // WPP_SF_I_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_I function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_I_def
#define WPP_RECORDER_AND_TRACE_SF_I_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_I(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_I_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_I function
//
#ifndef WPP_RECORDER_SF_I_def
#define WPP_RECORDER_SF_I_def
WPP_INLINE
VOID
WPP_RECORDER_SF_I(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_I_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_IDD_def
# define WPP_SF_IDD_def
WPP_INLINE void WPP_SF_IDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1, unsigned int _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_IDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_IDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_IDD_def
#define WPP_RECORDER_AND_TRACE_SF_IDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_IDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_IDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_IDD function
//
#ifndef WPP_RECORDER_SF_IDD_def
#define WPP_RECORDER_SF_IDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_IDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_IDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_IIDD_def
# define WPP_SF_IIDD_def
WPP_INLINE void WPP_SF_IIDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1, unsigned __int64 _a2, unsigned int _a3, unsigned int _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0); }
#endif // WPP_SF_IIDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_IIDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_IIDD_def
#define WPP_RECORDER_AND_TRACE_SF_IIDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_IIDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned int _a3, unsigned int _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_IIDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_IIDD function
//
#ifndef WPP_RECORDER_SF_IIDD_def
#define WPP_RECORDER_SF_IIDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_IIDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned int _a3, unsigned int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_IIDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_IIIIDD_def
# define WPP_SF_IIIIDD_def
WPP_INLINE void WPP_SF_IIIIDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0); }
#endif // WPP_SF_IIIIDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_IIIIDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_IIIIDD_def
#define WPP_RECORDER_AND_TRACE_SF_IIIIDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_IIIIDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_IIIIDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_IIIIDD function
//
#ifndef WPP_RECORDER_SF_IIIIDD_def
#define WPP_RECORDER_SF_IIIIDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_IIIIDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
}
#endif // WPP_RECORDER_SF_IIIIDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_IIIIDDD_def
# define WPP_SF_IIIIDDD_def
WPP_INLINE void WPP_SF_IIIIDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7)  (void*)0); }
#endif // WPP_SF_IIIIDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_IIIIDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_IIIIDDD_def
#define WPP_RECORDER_AND_TRACE_SF_IIIIDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_IIIIDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_IIIIDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_IIIIDDD function
//
#ifndef WPP_RECORDER_SF_IIIIDDD_def
#define WPP_RECORDER_SF_IIIIDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_IIIIDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2, unsigned __int64 _a3, unsigned __int64 _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7)  (void*)0);
}
#endif // WPP_RECORDER_SF_IIIIDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_d_def
# define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0); }
#endif // WPP_SF_d_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_d function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_d_def
#define WPP_RECORDER_AND_TRACE_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_d(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_d_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_d function
//
#ifndef WPP_RECORDER_SF_d_def
#define WPP_RECORDER_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_SF_d(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_d_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_qII_def
# define WPP_SF_qII_def
WPP_INLINE void WPP_SF_qII(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned __int64 _a2, unsigned __int64 _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0); }
#endif // WPP_SF_qII_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_qII function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_qII_def
#define WPP_RECORDER_AND_TRACE_SF_qII_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_qII(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, unsigned __int64 _a2, unsigned __int64 _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_qII_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_qII function
//
#ifndef WPP_RECORDER_SF_qII_def
#define WPP_RECORDER_SF_qII_def
WPP_INLINE
VOID
WPP_RECORDER_SF_qII(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, unsigned __int64 _a2, unsigned __int64 _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_qII_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_qq_def
# define WPP_SF_qq_def
WPP_INLINE void WPP_SF_qq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2)  (void*)0); }
#endif // WPP_SF_qq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_qq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_qq_def
#define WPP_RECORDER_AND_TRACE_SF_qq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_qq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_qq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_qq function
//
#ifndef WPP_RECORDER_SF_qq_def
#define WPP_RECORDER_SF_qq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_qq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_qq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_qqD_def
# define WPP_SF_qqD_def
WPP_INLINE void WPP_SF_qqD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_qqD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_qqD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_qqD_def
#define WPP_RECORDER_AND_TRACE_SF_qqD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_qqD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_qqD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_qqD function
//
#ifndef WPP_RECORDER_SF_qqD_def
#define WPP_RECORDER_SF_qqD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_qqD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_qqD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_qqq_def
# define WPP_SF_qqq_def
WPP_INLINE void WPP_SF_qqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2, const void* _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0); }
#endif // WPP_SF_qqq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_qqq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_qqq_def
#define WPP_RECORDER_AND_TRACE_SF_qqq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_qqq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2, const void* _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_qqq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_qqq function
//
#ifndef WPP_RECORDER_SF_qqq_def
#define WPP_RECORDER_SF_qqq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_qqq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, const void* _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(const void*, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_qqq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sdd_def
# define WPP_SF_sdd_def
WPP_INLINE void WPP_SF_sdd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, signed int _a2, signed int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0); }
#endif // WPP_SF_sdd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sdd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sdd_def
#define WPP_RECORDER_AND_TRACE_SF_sdd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sdd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, signed int _a2, signed int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sdd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sdd function
//
#ifndef WPP_RECORDER_SF_sdd_def
#define WPP_RECORDER_SF_sdd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sdd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, signed int _a2, signed int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sdd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_RtPacketObject_cpp64
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp64(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp64) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     10, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp64(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp64) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                10, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp64(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp64) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                10, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp66
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp66(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp66) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     11, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp66(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp66) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                11, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp66(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp66) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                11, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp74
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp74(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp74) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     12, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp74(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp74) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                12, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp74(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp74) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                12, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp101
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp101(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp101) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     13, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp101(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp101) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp101(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp101) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp115
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp115(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp115) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     14, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp115(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp115) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                14, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp115(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp115) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                14, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp117
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp117(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp117) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     15, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp117(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp117) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp117(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp117) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp118
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp118(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp118) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     16, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp118(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp118) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp118(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp118) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp128
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp128(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp128) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     17, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp128(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp128) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp128(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp128) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp157
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp157(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp157) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     18, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp157(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp157) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp157(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp157) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp158
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp158(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp158) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     19, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp158(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp158) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                19, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp158(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp158) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                19, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp159
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp159(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp159) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     20, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp159(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp159) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                20, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp159(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp159) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                20, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp160
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp160(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp160) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     21, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp160(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp160) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                21, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp160(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp160) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                21, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp161
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp161(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp161) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     22, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp161(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp161) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                22, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp161(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp161) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                22, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp162
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp162(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp162) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     23, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp162(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp162) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp162(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp162) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp171
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp171(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp171) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     24, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp171(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp171) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp171(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp171) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp184
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp184(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp184) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     25, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp184(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp184) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp184(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp184) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp211
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp211(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp211) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     26, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp211(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp211) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                26, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp211(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp211) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                26, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp224
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp224(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp224) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     27, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp224(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp224) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                27, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp224(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp224) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                27, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp249
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp249(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp249) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     28, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp249(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp249) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                28, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp249(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp249) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                28, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp260
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp260(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp260) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     29, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp260(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp260) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                29, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp260(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp260) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                29, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp276
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp276(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp276) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     30, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp276(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp276) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                30, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp276(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp276) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                30, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp308
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp308(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp308) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     31, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp308(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp308) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp308(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp308) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp321
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp321(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp321) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     32, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp321(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp321) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp321(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp321) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp322
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp322(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp322) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     33, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp322(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp322) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp322(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp322) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp330
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp330) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     34, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp330) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                34, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp330) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                34, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp387
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp387(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp387) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_IDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     35, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp387(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp387) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_IDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp387(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp387) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_IDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp401
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp401(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp401) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     36, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp401(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp401) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                36, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp401(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp401) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                36, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp402
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp402(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp402) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     37, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp402(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp402) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                37, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp402(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp402) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                37, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp424
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp424(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp424) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     38, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp424(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp424) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp424(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp424) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp425
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp425(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp425) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qqD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     39, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp425(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp425) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qqD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp425(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp425) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qqD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp518
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp518(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp518) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     40, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp518(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp518) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                40, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp518(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp518) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                40, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp532
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp532(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp532) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     41, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp532(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp532) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                41, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp532(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp532) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                41, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp533
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp533(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp533) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qqD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     42, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp533(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp533) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qqD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                42, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp533(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp533) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qqD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                42, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp559
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp559(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp559) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     43, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp559(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp559) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                43, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp559(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp559) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                43, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp578
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp578(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp578) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_IIIIDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     44, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp578(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp578) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_IIIIDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                44, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp578(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp578) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_SF_IIIIDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                44, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp583
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp583(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp583) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qII( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     45, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp583(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp583) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qII( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                45, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp583(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp583) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qII( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                45, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp589
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp589(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp589) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_IDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     46, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp589(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp589) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_IDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                46, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp589(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp589) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_IDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                46, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp615
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp615(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp615) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_IDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     47, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp615(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp615) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_IDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                47, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp615(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp615) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_IDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                47, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp629
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp629(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp629) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     48, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp629(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp629) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp629(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp629) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp630
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp630(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp630) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     49, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp630(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp630) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                49, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp630(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp630) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                49, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp652
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp652(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp652) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     50, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp652(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp652) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                50, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp652(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp652) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                50, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp653
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp653(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp653) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qqD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     51, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp653(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp653) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qqD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                51, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp653(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp653) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qqD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                51, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp686
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp686(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp686) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     52, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp686(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp686) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                52, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp686(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp686) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                52, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp700
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp700(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp700) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     53, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp700(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp700) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                53, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp700(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp700) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                53, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp701
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp701(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp701) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qqD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     54, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp701(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp701) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qqD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                54, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp701(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp701) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qqD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                54, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp719
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp719(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp719) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     55, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp719(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp719) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                55, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp719(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp719) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                55, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp738
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp738(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp738) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16)); \
            WPP_RECORDER_AND_TRACE_SF_IIIIDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     56, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp738(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp738) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16)), \
            WPP_RECORDER_SF_IIIIDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp738(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp738) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16)), \
            WPP_SF_IIIIDDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp744
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp744(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp744) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qII( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     57, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp744(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp744) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qII( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                57, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp744(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp744) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qII( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                57, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp748
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp748(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp748) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_qq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     58, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp748(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp748) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_qq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                58, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp748(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp748) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_qq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                58, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp753
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp753(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp753) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_IDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     59, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp753(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp753) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_IDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                59, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp753(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp753) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_IDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                59, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp772
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp772(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp772) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     60, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp772(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp772) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                60, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp772(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp772) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                60, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp774
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp774(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp774) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     61, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp774(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp774) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp774(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp774) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp799
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp799(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp799) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     62, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp799(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp799) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                62, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp799(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp799) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                62, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp819
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp819(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp819) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     63, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp819(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp819) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp819(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp819) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp831
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp831(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp831) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     64, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp831(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp831) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                64, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp831(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp831) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                64, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp837
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp837(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp837) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     65, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp837(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp837) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                65, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp837(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp837) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                65, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp856
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp856(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp856) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     66, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp856(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp856) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                66, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp856(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp856) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                66, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp858
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp858(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp858) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     67, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp858(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp858) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                67, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp858(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp858) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                67, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp863
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp863(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp863) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     68, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp863(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp863) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                68, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp863(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp863) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                68, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp886
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp886(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp886) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     69, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp886(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp886) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                69, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp886(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp886) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                69, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp901
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp901(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp901) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     70, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp901(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp901) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                70, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp901(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp901) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                70, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp920
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,POSCOND,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp920(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp920) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                     71, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp920(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp920) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), \
                71, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp920(POSCOND, RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS), " File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp920) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG((" File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS) \
                71, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_POSCOND_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, POSCOND, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp925
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp925(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp925) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_IIDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     72, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp925(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp925) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_RECORDER_SF_IIDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp925(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp925) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_SF_IIDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp926
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp926(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp926) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_I( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     73, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp926(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp926) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_I( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp926(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp926) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_I( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp928
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp928(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp928) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     74, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp928(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp928) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                74, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp928(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp928) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                74, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp950
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp950(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp950) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     75, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp950(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp950) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                75, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp950(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp950) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                75, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp971
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp971(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp971) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                     76, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp971(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp971) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                76, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp971(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp971) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                76, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp977
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp977(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp977) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                     77, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp977(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp977) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                77, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp977(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp977) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                77, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp997
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp997(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp997) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                     78, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp997(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp997) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                78, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp997(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp997) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                78, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp1009
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#ifndef WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST
#  define WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL,FLAGS,IFRLOG,RETSTATUS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1009(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp1009) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)); \
            WPP_RECORDER_AND_TRACE_SF_sdd( \
                     WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                     79, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1009(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp1009) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_FILTER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_RECORDER_SF_sdd( \
                WPP_RECORDER_LEVEL_FLAGS_IFRLOG_RETSTATUS_ARGS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), \
                79, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1009(RETSTATUS) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS_IFRLOG_RETSTATUS(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS), "ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_PRE(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
    WPP_ANNOTATE(RtPacketObject_cpp1009) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_ENABLED(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
        ?   WPP_INVOKE_WPP_DEBUG(("ERROR: File:%s, Line:%d - status=%!STATUS!", __FILE__, __LINE__, __statusRet)), \
            WPP_SF_sdd( \
                WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_LOGGER(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS) \
                79, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, __statusRet), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_IFRLOG_RETSTATUS_POST(LEVEL_ERROR, FLAG_DEVICE_ALL, g_AudioDspLog, RETSTATUS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RtPacketObject_cpp1013
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1013(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(RtPacketObject_cpp1013) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     80, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1013(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp1013) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                80, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RtPacketObject_cpp1013(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(RtPacketObject_cpp1013) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                80, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#ifdef __INTELLISENSE__
#define DoDebugTrace(TRACELEVEL, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DoDebugTrace WPP_(CALL)
#endif
#undef DoTraceMessage
#ifdef __INTELLISENSE__
#define DoTraceMessage(LEVEL, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DoTraceMessage WPP_(CALL)
#endif
#undef DrvLogCritical
#ifdef __INTELLISENSE__
#define DrvLogCritical(IFRLOG, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DrvLogCritical WPP_(CALL)
#endif
#undef DrvLogError
#ifdef __INTELLISENSE__
#define DrvLogError(IFRLOG, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DrvLogError WPP_(CALL)
#endif
#undef DrvLogInfo
#ifdef __INTELLISENSE__
#define DrvLogInfo(IFRLOG, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DrvLogInfo WPP_(CALL)
#endif
#undef DrvLogVerbose
#ifdef __INTELLISENSE__
#define DrvLogVerbose(IFRLOG, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DrvLogVerbose WPP_(CALL)
#endif
#undef DrvLogWarning
#ifdef __INTELLISENSE__
#define DrvLogWarning(IFRLOG, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define DrvLogWarning WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_FAILED_MSG
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_FAILED_MSG(RETSTATUS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define RETURN_NTSTATUS_IF_FAILED_MSG WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_TRUE_MSG
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_TRUE_MSG(POSCOND, RETSTATUS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define RETURN_NTSTATUS_IF_TRUE_MSG WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_MSG
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_MSG(RETSTATUS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define RETURN_NTSTATUS_MSG WPP_(CALL)
#endif
#undef TRACE_HRESULT
#ifdef __INTELLISENSE__
#define TRACE_HRESULT(LEVEL, FLAGS, HR, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define TRACE_HRESULT WPP_(CALL)
#endif
#undef TRACE_LINE
#ifdef __INTELLISENSE__
#define TRACE_LINE(LEVEL, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define TRACE_LINE WPP_(CALL)
#endif
#undef TRACE_METHOD_LINE
#ifdef __INTELLISENSE__
#define TRACE_METHOD_LINE(LEVEL, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define TRACE_METHOD_LINE WPP_(CALL)
#endif
#undef Trace
#ifdef __INTELLISENSE__
#define Trace(LEVEL, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define Trace WPP_(CALL)
#endif
#undef TraceEvents
#ifdef __INTELLISENSE__
#define TraceEvents(LEVEL, FLAGS, MSG, ...) ((void)(MSG, ## __VA_ARGS__))
#else
#define TraceEvents WPP_(CALL)
#endif
#undef DrvLogEnter
#ifdef __INTELLISENSE__
#define DrvLogEnter(IFRLOG) ((void)0)
#else
#define DrvLogEnter WPP_(CALL)
#endif
#undef DrvLogExit
#ifdef __INTELLISENSE__
#define DrvLogExit(IFRLOG) ((void)0)
#else
#define DrvLogExit WPP_(CALL)
#endif
#undef RETURN_IF_FAILED
#ifdef __INTELLISENSE__
#define RETURN_IF_FAILED(RETSTATUS) ((void)0)
#else
#define RETURN_IF_FAILED WPP_(CALL)
#endif
#undef RETURN_NTSTATUS
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS(RETSTATUS) ((void)0)
#else
#define RETURN_NTSTATUS WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_FAILED
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_FAILED(RETSTATUS) ((void)0)
#else
#define RETURN_NTSTATUS_IF_FAILED WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_FAILED_UNLESS_ALLOWED
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_FAILED_UNLESS_ALLOWED(RETSTATUS, ALLOWEDSTATUS) ((void)0)
#else
#define RETURN_NTSTATUS_IF_FAILED_UNLESS_ALLOWED WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_FALSE
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_FALSE(RETSTATUS, NEGCOND) ((void)0)
#else
#define RETURN_NTSTATUS_IF_FALSE WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_NULL
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_NULL(RETSTATUS, RETPTR) ((void)0)
#else
#define RETURN_NTSTATUS_IF_NULL WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_NULL_ALLOC
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_NULL_ALLOC(RETPTR) ((void)0)
#else
#define RETURN_NTSTATUS_IF_NULL_ALLOC WPP_(CALL)
#endif
#undef RETURN_NTSTATUS_IF_TRUE
#ifdef __INTELLISENSE__
#define RETURN_NTSTATUS_IF_TRUE(POSCOND, RETSTATUS) ((void)0)
#else
#define RETURN_NTSTATUS_IF_TRUE WPP_(CALL)
#endif
#undef TRACE_FAILURE_INFO
#ifdef __INTELLISENSE__
#define TRACE_FAILURE_INFO(LEVEL, FLAGS, FI) ((void)0)
#else
#define TRACE_FAILURE_INFO WPP_(CALL)
#endif
#undef TRACE_FUNCTION_ENTRY
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_ENTRY(LEVEL, FLAGS) ((void)0)
#else
#define TRACE_FUNCTION_ENTRY WPP_(CALL)
#endif
#undef TRACE_FUNCTION_EXIT
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_EXIT(LEVEL, FLAGS) ((void)0)
#else
#define TRACE_FUNCTION_EXIT WPP_(CALL)
#endif
#undef TRACE_FUNCTION_EXIT_DWORD
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_EXIT_DWORD(LEVEL, FLAGS, RETVAL) ((void)0)
#else
#define TRACE_FUNCTION_EXIT_DWORD WPP_(CALL)
#endif
#undef TRACE_FUNCTION_EXIT_HR
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_EXIT_HR(LEVEL, FLAGS, HR) ((void)0)
#else
#define TRACE_FUNCTION_EXIT_HR WPP_(CALL)
#endif
#undef TRACE_FUNCTION_EXIT_PTR
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_EXIT_PTR(LEVEL, FLAGS, RETVAL) ((void)0)
#else
#define TRACE_FUNCTION_EXIT_PTR WPP_(CALL)
#endif
#undef TRACE_FUNCTION_EXIT_STATUS
#ifdef __INTELLISENSE__
#define TRACE_FUNCTION_EXIT_STATUS(LEVEL, FLAGS, STATUS) ((void)0)
#else
#define TRACE_FUNCTION_EXIT_STATUS WPP_(CALL)
#endif
#undef TRACE_METHOD_ENTRY
#ifdef __INTELLISENSE__
#define TRACE_METHOD_ENTRY(LEVEL, FLAGS) ((void)0)
#else
#define TRACE_METHOD_ENTRY WPP_(CALL)
#endif
#undef TRACE_METHOD_EXIT
#ifdef __INTELLISENSE__
#define TRACE_METHOD_EXIT(LEVEL, FLAGS) ((void)0)
#else
#define TRACE_METHOD_EXIT WPP_(CALL)
#endif
#undef TRACE_METHOD_EXIT_DWORD
#ifdef __INTELLISENSE__
#define TRACE_METHOD_EXIT_DWORD(LEVEL, FLAGS, RETVAL) ((void)0)
#else
#define TRACE_METHOD_EXIT_DWORD WPP_(CALL)
#endif
#undef TRACE_METHOD_EXIT_HR
#ifdef __INTELLISENSE__
#define TRACE_METHOD_EXIT_HR(LEVEL, FLAGS, HR) ((void)0)
#else
#define TRACE_METHOD_EXIT_HR WPP_(CALL)
#endif
#undef TRACE_METHOD_EXIT_PTR
#ifdef __INTELLISENSE__
#define TRACE_METHOD_EXIT_PTR(LEVEL, FLAGS, RETVAL) ((void)0)
#else
#define TRACE_METHOD_EXIT_PTR WPP_(CALL)
#endif
#undef TRACE_METHOD_EXIT_STATUS
#ifdef __INTELLISENSE__
#define TRACE_METHOD_EXIT_STATUS(LEVEL, FLAGS, STATUS) ((void)0)
#else
#define TRACE_METHOD_EXIT_STATUS WPP_(CALL)
#endif

#ifdef __cplusplus
} // extern "C"
#endif

