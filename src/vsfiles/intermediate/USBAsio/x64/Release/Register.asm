; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35216.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_08KMINELBC@CLSID?2?$CFs@			; `string'
PUBLIC	??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@		; `string'
PUBLIC	??_C@_0BB@PEAGLIBC@SOFTWARE?2ASIO?2?$CFs@	; `string'
PUBLIC	??_C@_0BI@EJPDCOGH@CLSID?2?$CFs?2InprocServer32@ ; `string'
PUBLIC	??_C@_0P@FAEGJAHE@ThreadingModel@		; `string'
PUBLIC	??_C@_05GIBEAPNE@CLSID@				; `string'
PUBLIC	??_C@_0M@OHKMKKDH@Description@			; `string'
EXTRN	__imp_RegDeleteTreeA:PROC
EXTRN	__imp_RegCloseKey:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	__imp_RegQueryValueExA:PROC
EXTRN	__imp_RegCreateKeyExA:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp_RegSetValueExA:PROC
EXTRN	__imp_CoTaskMemFree:PROC
EXTRN	__imp_RegOpenKeyExA:PROC
EXTRN	__imp_CharLowerA:PROC
EXTRN	__imp_StringFromCLSID:PROC
EXTRN	__imp_GetModuleFileNameA:PROC
_DATA	ENDS
;	COMDAT ??_C@_0M@OHKMKKDH@Description@
CONST	SEGMENT
??_C@_0M@OHKMKKDH@Description@ DB 'Description', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID@ DB 'CLSID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FAEGJAHE@ThreadingModel@
CONST	SEGMENT
??_C@_0P@FAEGJAHE@ThreadingModel@ DB 'ThreadingModel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EJPDCOGH@CLSID?2?$CFs?2InprocServer32@
CONST	SEGMENT
??_C@_0BI@EJPDCOGH@CLSID?2?$CFs?2InprocServer32@ DB 'CLSID\%s\InprocServe'
	DB	'r32', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEAGLIBC@SOFTWARE?2ASIO?2?$CFs@
CONST	SEGMENT
??_C@_0BB@PEAGLIBC@SOFTWARE?2ASIO?2?$CFs@ DB 'SOFTWARE\ASIO\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@
CONST	SEGMENT
??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@ DB 'SOFTWARE\ASIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KMINELBC@CLSID?2?$CFs@
CONST	SEGMENT
??_C@_08KMINELBC@CLSID?2?$CFs@ DB 'CLSID\%s', 00H	; `string'
PUBLIC	?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z	; RegisterAsioDriver
PUBLIC	?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z	; UnregisterAsioDriver
PUBLIC	sprintf_s
PUBLIC	HRESULT_FROM_WIN32
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD imagerel $LN154
	DD	imagerel $LN154+260
	DD	imagerel $unwind$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD imagerel $LN154+260
	DD	imagerel $LN154+385
	DD	imagerel $chain$0$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD imagerel $LN154+385
	DD	imagerel $LN154+1696
	DD	imagerel $chain$4$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD imagerel $LN154+1696
	DD	imagerel $LN154+1704
	DD	imagerel $chain$5$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD imagerel $LN154+1704
	DD	imagerel $LN154+1732
	DD	imagerel $chain$6$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z DD imagerel $LN44
	DD	imagerel $LN44+553
	DD	imagerel $unwind$?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z DD imagerel ?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z
	DD	imagerel ?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z+194
	DD	imagerel $unwind$?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z DD imagerel ?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z
	DD	imagerel ?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z+205
	DD	imagerel $unwind$?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z DD imagerel ?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z
	DD	imagerel ?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z+113
	DD	imagerel $unwind$?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN6
	DD	imagerel $LN6+87
	DD	imagerel $unwind$sprintf_s
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 051201H
	DD	0700e6212H
	DD	0500c600dH
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z DD 011319H
	DD	08204H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z DD 041919H
	DD	0c340aH
	DD	07006920aH
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z DD 041719H
	DD	07004b208H
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z DD 072b19H
	DD	040741aH
	DD	03f341aH
	DD	03c011aH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	01d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD 021H
	DD	imagerel $LN154
	DD	imagerel $LN154+260
	DD	imagerel $unwind$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD 021H
	DD	imagerel $LN154+260
	DD	imagerel $LN154+385
	DD	imagerel $chain$0$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD 082021H
	DD	0d4e420H
	DD	0d5d418H
	DD	0dd7410H
	DD	0dc6408H
	DD	imagerel $LN154+260
	DD	imagerel $LN154+385
	DD	imagerel $chain$0$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD 020821H
	DD	0db3408H
	DD	imagerel $LN154
	DD	imagerel $LN154+260
	DD	imagerel $unwind$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z DD 052619H
	DD	0d60115H
	DD	0c004f006H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0690H
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
;	COMDAT HRESULT_FROM_WIN32
_TEXT	SEGMENT
x$ = 8
HRESULT_FROM_WIN32 PROC					; COMDAT

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	ecx, ecx
	jg	SHORT $LN3@HRESULT_FR
	mov	eax, ecx
	ret	0
$LN3@HRESULT_FR:
	movzx	eax, cx
	or	eax, -2147024896			; ffffffff80070000H
	ret	0
HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Buffer$ = 96
_BufferCount$ = 104
_Format$ = 112
sprintf_s PROC						; COMDAT

; 1823 :         {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rsi, r8

; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);

	lea	rbp, QWORD PTR _Format$[rsp+8]
	mov	rdi, rdx
	mov	rbx, rcx

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbp
	mov	r9, rsi
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

	test	eax, eax
	mov	ecx, -1
	cmovs	eax, ecx

; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1828 :             __crt_va_end(_ArgList);
; 1829 :             return _Result;
; 1830 :         }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
;	COMDAT ?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z
_TEXT	SEGMENT
subKey$1 = 48
__$ArrayPad$ = 56
key$ = 80
regPath$ = 88
?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z PROC		; FindRegPath, COMDAT

; 52   : {

	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 53   :     bool find = false;
; 54   : 
; 55   :     if (regPath != nullptr)

	test	rdx, rdx
	je	SHORT $LN6@FindRegPat

; 56   :     {
; 57   :         HKEY    subKey = 0;
; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$1[rsp]
	mov	QWORD PTR subKey$1[rsp], 0
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	SHORT $LN6@FindRegPat

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$1[rsp]
	call	QWORD PTR __imp_RegCloseKey

; 62   :             find = true;
; 63   :         }
; 64   :     }
; 65   : 
; 66   :     return find;

	mov	al, 1

; 67   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
$LN6@FindRegPat:
	xor	al, al
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?FindRegPath@@YA_NPEAUHKEY__@@PEBD@Z ENDP		; FindRegPath
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
;	COMDAT ?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z
_TEXT	SEGMENT
key$ = 48
valueSize$ = 56
valueType$ = 60
__$ArrayPad$ = 64
mainKey$dead$ = 96
regPath$ = 104
valueName$dead$ = 112
data$ = 120
dataSize$dead$ = 128
?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z PROC	; GetRegString, COMDAT

; 70   : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 71   :     HKEY  key;
; 72   :     DWORD valueSize, valueType;
; 73   :     bool  result = false;

	xor	bl, bl
	mov	rdi, r9

; 74   : 
; 75   :     if (regPath)

	test	rdx, rdx
	je	$LN8@GetRegStri

; 76   :     {
; 77   :         if (RegOpenKeyEx(mainKey, regPath, 0, KEY_ALL_ACCESS, &key) == ERROR_SUCCESS)

	lea	rax, QWORD PTR key$[rsp]
	mov	r9d, 983103				; 000f003fH
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, -2147483648			; ffffffff80000000H
	call	QWORD PTR __imp_RegOpenKeyExA
	test	eax, eax
	jne	SHORT $LN8@GetRegStri

; 78   :         {
; 79   :             if (RegQueryValueEx(key, valueName, 0, &valueType, 0, &valueSize) == ERROR_SUCCESS)

	mov	rcx, QWORD PTR key$[rsp]
	lea	rax, QWORD PTR valueSize$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, QWORD PTR valueType$[rsp]
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], 0
	xor	edx, edx
	call	QWORD PTR __imp_RegQueryValueExA
	test	eax, eax
	jne	SHORT $LN5@GetRegStri

; 80   :             {
; 81   :                 if (valueSize <= dataSize)

	cmp	DWORD PTR valueSize$[rsp], 260		; 00000104H
	ja	SHORT $LN5@GetRegStri

; 82   :                 {
; 83   :                     RegQueryValueEx(key, valueName, 0, &valueType, (LPBYTE)data, &valueSize);

	mov	rcx, QWORD PTR key$[rsp]
	lea	rax, QWORD PTR valueSize$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, QWORD PTR valueType$[rsp]
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rdi
	xor	edx, edx
	call	QWORD PTR __imp_RegQueryValueExA

; 84   :                     result = true;

	mov	bl, 1
$LN5@GetRegStri:

; 85   :                 }
; 86   :             }
; 87   :             RegCloseKey(key);

	mov	rcx, QWORD PTR key$[rsp]
	call	QWORD PTR __imp_RegCloseKey
$LN8@GetRegStri:

; 88   :         }
; 89   :     }
; 90   :     return result;
; 91   : }

	movzx	eax, bl
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?GetRegString@@YA_NPEAUHKEY__@@PEBD1PEAXK@Z ENDP	; GetRegString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
;	COMDAT ?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z
_TEXT	SEGMENT
key$ = 80
__$ArrayPad$ = 88
rootKey$ = 128
keyName$ = 136
valueName$ = 144
data$ = 152
?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z PROC ; CreateRegistryKeyAndSetValue, COMDAT

; 99   : {

	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 100  :     HRESULT result = S_OK;

	xor	edi, edi

; 101  :     LONG    ret;
; 102  :     HKEY    key;
; 103  : 
; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	lea	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR [rsp+64], rdi
	mov	rbx, r9
	mov	QWORD PTR [rsp+56], rax
	mov	rsi, r8
	mov	QWORD PTR [rsp+48], rdi
	xor	r9d, r9d
	mov	DWORD PTR [rsp+40], 983103		; 000f003fH
	xor	r8d, r8d
	mov	DWORD PTR [rsp+32], edi
	call	QWORD PTR __imp_RegCreateKeyExA

; 105  :     if (ret != ERROR_SUCCESS)

	test	eax, eax
	je	SHORT $LN2@CreateRegi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	jle	SHORT $LN3@CreateRegi
	movzx	eax, ax
	or	eax, -2147024896			; ffffffff80070000H
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 108  :     }

	jmp	SHORT $LN3@CreateRegi
$LN2@CreateRegi:

; 109  :     else
; 110  :     {
; 111  :         if (data != nullptr)

	test	rbx, rbx
	je	SHORT $LN4@CreateRegi

; 112  :         {
; 113  :             ret = RegSetValueEx(key, valueName, 0, REG_SZ, (LPBYTE)data, (DWORD)((_tcslen(data) + 1) * sizeof(TCHAR)));

	mov	rax, -1
$LL14@CreateRegi:
	inc	rax
	cmp	BYTE PTR [rbx+rax], dil
	jne	SHORT $LL14@CreateRegi
	mov	rcx, QWORD PTR key$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+40], eax
	mov	r9d, 1
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rbx
	mov	rdx, rsi
	call	QWORD PTR __imp_RegSetValueExA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN13@CreateRegi
	movzx	eax, ax
	or	eax, -2147024896			; ffffffff80070000H
$LN13@CreateRegi:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 114  :             result = HRESULT_FROM_WIN32(ret);

	mov	edi, eax
$LN4@CreateRegi:

; 115  :         }
; 116  :         RegCloseKey(key);

	mov	rcx, QWORD PTR key$[rsp]
	call	QWORD PTR __imp_RegCloseKey

; 117  :     }
; 118  :     return result;

	mov	eax, edi
$LN3@CreateRegi:

; 119  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?CreateRegistryKeyAndSetValue@@YAJPEAUHKEY__@@PEBD11@Z ENDP ; CreateRegistryKeyAndSetValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
;	COMDAT ?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z
_TEXT	SEGMENT
subKey$7 = 64
subKey$8 = 64
subKey$9 = 64
wszCLSID$ = 72
clsid$ = 80
regpath$ = 192
__$ArrayPad$ = 464
clsId$ = 496
__formal$dead$ = 504
regName$dead$ = 512
?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z PROC		; UnregisterAsioDriver, COMDAT

; 126  : {

$LN44:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	lea	rbp, QWORD PTR [rsp-224]
	sub	rsp, 480				; 000001e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	rbx, rcx

; 127  :     HRESULT  result = S_OK;
; 128  :     TCHAR    regpath[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR regpath$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset
	xorps	xmm0, xmm0

; 129  :     TCHAR    clsid[CLSID_STRING_LEN] = {0};
; 130  :     LPOLESTR wszCLSID = nullptr;
; 131  : 
; 132  :     result = StringFromCLSID(clsId, &wszCLSID);

	lea	rdx, QWORD PTR wszCLSID$[rsp]
	xor	eax, eax
	xor	edi, edi
	mov	rcx, rbx
	mov	DWORD PTR clsid$[rbp-160], eax
	movups	XMMWORD PTR clsid$[rsp], xmm0
	mov	QWORD PTR wszCLSID$[rsp], rdi
	movups	XMMWORD PTR clsid$[rsp+16], xmm0
	movups	XMMWORD PTR clsid$[rsp+32], xmm0
	movups	XMMWORD PTR clsid$[rbp-208], xmm0
	movups	XMMWORD PTR clsid$[rbp-192], xmm0
	movups	XMMWORD PTR clsid$[rbp-176], xmm0
	call	QWORD PTR __imp_StringFromCLSID
	mov	ebx, eax

; 133  :     if (!SUCCEEDED(result))

	test	eax, eax
	js	$LN1@Unregister

; 134  :     {
; 135  :         return result;
; 136  :     }
; 137  : #ifdef _UNICODE
; 138  :     wcsncpy_s(clsid, CLSID_STRING_LEN - 1, wszCLSID, _TRUNCATE);
; 139  : #else
; 140  :     if (WideCharToMultiByte(CP_ACP, 0, (LPWSTR)wszCLSID, -1, clsid, CLSID_STRING_LEN, 0, 0) == 0)

	mov	r8, QWORD PTR wszCLSID$[rsp]
	lea	rax, QWORD PTR clsid$[rsp]
	mov	QWORD PTR [rsp+56], rdi
	mov	r9d, -1
	mov	QWORD PTR [rsp+48], rdi
	xor	edx, edx
	mov	DWORD PTR [rsp+40], 100			; 00000064H
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_WideCharToMultiByte
	mov	rcx, QWORD PTR wszCLSID$[rsp]
	test	eax, eax
	jne	SHORT $LN3@Unregister

; 141  :     {
; 142  :         CoTaskMemFree(wszCLSID);

	call	QWORD PTR __imp_CoTaskMemFree

; 143  :         return HRESULT_FROM_WIN32(GetLastError());

	call	QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	$LN1@Unregister
	movzx	eax, ax
	or	eax, -2147024896			; ffffffff80070000H
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 143  :         return HRESULT_FROM_WIN32(GetLastError());

	jmp	$LN1@Unregister
$LN3@Unregister:

; 144  :     }
; 145  : #endif
; 146  :     CoTaskMemFree(wszCLSID);

	call	QWORD PTR __imp_CoTaskMemFree

; 147  : 
; 148  :     _stprintf_s(regpath, _MAX_PATH, REGSTR_CLSID _T("\\%s"), clsid);

	lea	r9, QWORD PTR clsid$[rsp]
	mov	edx, 260				; 00000104H
	lea	r8, OFFSET FLAT:??_C@_08KMINELBC@CLSID?2?$CFs@
	lea	rcx, QWORD PTR regpath$[rbp-256]
	call	sprintf_s

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$7[rsp]
	mov	QWORD PTR subKey$7[rsp], rdi
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR regpath$[rbp-256]
	mov	rcx, -2147483648			; ffffffff80000000H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	SHORT $LN19@Unregister

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$7[rsp]
	call	QWORD PTR __imp_RegCloseKey

; 149  :     if (FindRegPath(HKEY_CLASSES_ROOT, regpath))
; 150  :     {
; 151  :         result = HRESULT_FROM_WIN32(RegDeleteTree(HKEY_CLASSES_ROOT, regpath));

	lea	rdx, QWORD PTR regpath$[rbp-256]
	mov	rcx, -2147483648			; ffffffff80000000H
	call	QWORD PTR __imp_RegDeleteTreeA
	mov	ebx, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN19@Unregister
	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
$LN19@Unregister:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$8[rsp]
	mov	QWORD PTR subKey$8[rsp], rdi
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	SHORT $LN31@Unregister

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$8[rsp]
	call	QWORD PTR __imp_RegCloseKey

; 152  :         // ASSERT(SUCCEEDED(result));
; 153  :     }
; 154  : 
; 155  :     if (FindRegPath(HKEY_LOCAL_MACHINE, REGSTR_SOFTWAREASIO))
; 156  :     {
; 157  :         _stprintf_s(regpath, _MAX_PATH, REGSTR_SOFTWAREASIO _T("\\%s"), regName);

	lea	r9, OFFSET FLAT:??_C@_08JKCDEOBL@USB?5ASIO@
	mov	edx, 260				; 00000104H
	lea	r8, OFFSET FLAT:??_C@_0BB@PEAGLIBC@SOFTWARE?2ASIO?2?$CFs@
	lea	rcx, QWORD PTR regpath$[rbp-256]
	call	sprintf_s

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$9[rsp]
	mov	QWORD PTR subKey$9[rsp], rdi
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR regpath$[rbp-256]
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	SHORT $LN31@Unregister

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$9[rsp]
	call	QWORD PTR __imp_RegCloseKey

; 158  :         if (FindRegPath(HKEY_LOCAL_MACHINE, regpath))
; 159  :         {
; 160  :             result = HRESULT_FROM_WIN32(RegDeleteTree(HKEY_LOCAL_MACHINE, regpath));

	lea	rdx, QWORD PTR regpath$[rbp-256]
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegDeleteTreeA
	mov	ebx, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN31@Unregister
	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
$LN31@Unregister:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 165  :     return result;

	mov	eax, ebx
$LN1@Unregister:

; 166  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+480]
	mov	rbx, QWORD PTR [r11+24]
	mov	rdi, QWORD PTR [r11+32]
	mov	rsp, r11
	pop	rbp
	ret	0
?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z ENDP		; UnregisterAsioDriver
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp
;	COMDAT ?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z
_TEXT	SEGMENT
registryElements$19 = 80
registryElements$20 = 80
$T18 = 176
key$21 = 176
subKey$22 = 176
subKey$23 = 176
subKey$24 = 176
key$25 = 176
key$26 = 176
key$27 = 176
wszCLSID$ = 192
valueSize$28 = 200
valueType$29 = 204
clsid$ = 208
asioRegistryPath$ = 320
moduleName$ = 592
classRegistryPath$ = 864
InprocServer32RegistryPath$ = 1136
dllPath$ = 1408
__$ArrayPad$ = 1680
clsId$ = 1744
dllName$dead$ = 1752
regName$dead$ = 1760
asioDescriptor$dead$ = 1768
threadModel$dead$ = 1776
?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z PROC		; RegisterAsioDriver, COMDAT

; 175  : {

$LN154:
	push	rbp
	push	r12
	push	r15
	lea	rbp, QWORD PTR [rsp-1456]
	sub	rsp, 1712				; 000006b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	r15, rcx

; 176  :     HRESULT  result = S_OK;
; 177  :     HMODULE  module = nullptr;
; 178  :     bool     newregentry = false;
; 179  :     TCHAR    dllPath[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR dllPath$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset

; 180  :     TCHAR    moduleName[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR moduleName$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset

; 181  :     TCHAR    classRegistryPath[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR classRegistryPath$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset

; 182  :     TCHAR    InprocServer32RegistryPath[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR InprocServer32RegistryPath$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset

; 183  :     TCHAR    asioRegistryPath[_MAX_PATH] = {0};

	xor	edx, edx
	lea	rcx, QWORD PTR asioRegistryPath$[rbp-256]
	mov	r8d, 260				; 00000104H
	call	memset
	xorps	xmm0, xmm0

; 184  :     TCHAR    clsid[CLSID_STRING_LEN] = {0};
; 185  :     LPOLESTR wszCLSID = nullptr;
; 186  : 
; 187  :     module = GetModuleHandle(dllName);

	lea	rcx, OFFSET FLAT:??_C@_0M@BFGLKKGE@USBAsio?4dll@
	xor	eax, eax
	xor	r12d, r12d
	movups	XMMWORD PTR clsid$[rbp-256], xmm0
	mov	DWORD PTR clsid$[rbp-160], eax
	movups	XMMWORD PTR clsid$[rbp-240], xmm0
	mov	QWORD PTR wszCLSID$[rbp-256], r12
	movups	XMMWORD PTR clsid$[rbp-224], xmm0
	movups	XMMWORD PTR clsid$[rbp-208], xmm0
	movups	XMMWORD PTR clsid$[rbp-192], xmm0
	movups	XMMWORD PTR clsid$[rbp-176], xmm0
	call	QWORD PTR __imp_GetModuleHandleA

; 188  :     if (module == nullptr)

	test	rax, rax
	jne	SHORT $LN8@RegisterAs
$LN152@RegisterAs:

; 301  : }

	call	QWORD PTR __imp_GetLastError
	test	eax, eax
	jle	$LN1@RegisterAs
	movzx	eax, ax
	or	eax, -2147024896			; ffffffff80070000H
	jmp	$LN1@RegisterAs
$LN8@RegisterAs:

; 189  :     {
; 190  :         return HRESULT_FROM_WIN32(GetLastError());
; 191  :     }
; 192  : 
; 193  :     GetModuleFileName(module, moduleName, _MAX_PATH);

	mov	r8d, 260				; 00000104H
	lea	rdx, QWORD PTR moduleName$[rbp-256]
	mov	rcx, rax
	call	QWORD PTR __imp_GetModuleFileNameA

; 194  :     if (moduleName[0] == 0)

	cmp	BYTE PTR moduleName$[rbp-256], r12b
	je	SHORT $LN152@RegisterAs

; 195  :     {
; 196  :         return HRESULT_FROM_WIN32(GetLastError());
; 197  :     }
; 198  :     CharLower(moduleName);

	lea	rcx, QWORD PTR moduleName$[rbp-256]
	mov	QWORD PTR [rsp+1752], rbx
	call	QWORD PTR __imp_CharLowerA

; 199  : 
; 200  :     result = StringFromCLSID(clsId, &wszCLSID);

	lea	rdx, QWORD PTR wszCLSID$[rbp-256]
	mov	rcx, r15
	call	QWORD PTR __imp_StringFromCLSID
	mov	ebx, eax

; 201  :     if (!SUCCEEDED(result))

	test	eax, eax
	js	$LN151@RegisterAs

; 202  :     {
; 203  :         return result;
; 204  :     }
; 205  : #ifdef _UNICODE
; 206  :     wcsncpy_s(clsid, CLSID_STRING_LEN - 1, wszCLSID, _TRUNCATE);
; 207  : #else
; 208  :     if (WideCharToMultiByte(CP_ACP, 0, (LPWSTR)wszCLSID, -1, clsid, CLSID_STRING_LEN, 0, 0) == 0)

	mov	r8, QWORD PTR wszCLSID$[rbp-256]
	lea	rax, QWORD PTR clsid$[rbp-256]
	mov	QWORD PTR [rsp+56], r12
	mov	r9d, -1
	mov	QWORD PTR [rsp+48], r12
	xor	edx, edx
	mov	DWORD PTR [rsp+40], 100			; 00000064H
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_WideCharToMultiByte
	mov	rcx, QWORD PTR wszCLSID$[rbp-256]
	test	eax, eax
	jne	SHORT $LN11@RegisterAs

; 209  :     {
; 210  :         CoTaskMemFree(wszCLSID);

	call	QWORD PTR __imp_CoTaskMemFree

; 211  :         return HRESULT_FROM_WIN32(GetLastError());

	call	QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	$LN151@RegisterAs
	movzx	eax, ax
	or	eax, -2147024896			; ffffffff80070000H
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 211  :         return HRESULT_FROM_WIN32(GetLastError());

	jmp	$LN151@RegisterAs
$LN11@RegisterAs:
	mov	QWORD PTR [rsp+1760], rsi
	mov	QWORD PTR [rsp+1768], rdi
	mov	QWORD PTR [rsp+1704], r13
	mov	QWORD PTR [rsp+1696], r14

; 212  :     }
; 213  : #endif
; 214  :     CoTaskMemFree(wszCLSID);

	call	QWORD PTR __imp_CoTaskMemFree

; 215  : 
; 216  :     _stprintf_s(classRegistryPath, _countof(classRegistryPath), REGSTR_CLSID _T("\\%s"), clsid);

	lea	r9, QWORD PTR clsid$[rbp-256]
	mov	edx, 260				; 00000104H
	lea	r8, OFFSET FLAT:??_C@_08KMINELBC@CLSID?2?$CFs@
	lea	rcx, QWORD PTR classRegistryPath$[rbp-256]
	call	sprintf_s

; 217  :     _stprintf_s(InprocServer32RegistryPath, _countof(InprocServer32RegistryPath), REGSTR_CLSID _T("\\%s\\") REGSTR_INPROCSERVER32, clsid);

	lea	r9, QWORD PTR clsid$[rbp-256]
	mov	edx, 260				; 00000104H
	lea	r8, OFFSET FLAT:??_C@_0BI@EJPDCOGH@CLSID?2?$CFs?2InprocServer32@
	lea	rcx, QWORD PTR InprocServer32RegistryPath$[rbp-256]
	call	sprintf_s

; 218  :     _stprintf_s(asioRegistryPath, _countof(asioRegistryPath), REGSTR_SOFTWAREASIO _T("\\%s"), regName);

	lea	r13, OFFSET FLAT:??_C@_08JKCDEOBL@USB?5ASIO@
	mov	edx, 260				; 00000104H
	mov	r9, r13
	lea	r8, OFFSET FLAT:??_C@_0BB@PEAGLIBC@SOFTWARE?2ASIO?2?$CFs@
	lea	rcx, QWORD PTR asioRegistryPath$[rbp-256]
	call	sprintf_s

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$23[rbp-256]
	mov	QWORD PTR subKey$23[rbp-256], r12
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR classRegistryPath$[rbp-256]
	mov	rcx, -2147483648			; ffffffff80000000H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	$LN12@RegisterAs

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$23[rbp-256]
	call	QWORD PTR __imp_RegCloseKey

; 77   :         if (RegOpenKeyEx(mainKey, regPath, 0, KEY_ALL_ACCESS, &key) == ERROR_SUCCESS)

	lea	rax, QWORD PTR key$27[rbp-256]
	mov	r9d, 983103				; 000f003fH
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, QWORD PTR InprocServer32RegistryPath$[rbp-256]
	mov	rcx, -2147483648			; ffffffff80000000H
	call	QWORD PTR __imp_RegOpenKeyExA
	test	eax, eax
	jne	$LN112@RegisterAs

; 78   :         {
; 79   :             if (RegQueryValueEx(key, valueName, 0, &valueType, 0, &valueSize) == ERROR_SUCCESS)

	mov	rcx, QWORD PTR key$27[rbp-256]
	lea	rax, QWORD PTR valueSize$28[rbp-256]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, QWORD PTR valueType$29[rbp-256]
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], r12
	xor	edx, edx
	call	QWORD PTR __imp_RegQueryValueExA
	test	eax, eax
	jne	$LN91@RegisterAs

; 80   :             {
; 81   :                 if (valueSize <= dataSize)

	cmp	DWORD PTR valueSize$28[rbp-256], 260	; 00000104H
	ja	$LN91@RegisterAs

; 82   :                 {
; 83   :                     RegQueryValueEx(key, valueName, 0, &valueType, (LPBYTE)data, &valueSize);

	mov	rcx, QWORD PTR key$27[rbp-256]
	lea	rax, QWORD PTR valueSize$28[rbp-256]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, QWORD PTR valueType$29[rbp-256]
	lea	rax, QWORD PTR dllPath$[rbp-256]
	xor	r8d, r8d
	xor	edx, edx
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_RegQueryValueExA

; 84   :                     result = true;

	mov	rcx, QWORD PTR key$27[rbp-256]
	call	QWORD PTR __imp_RegCloseKey

; 219  : 
; 220  :     // If class registry already exists and another dll has been registered, delete it.
; 221  :     // If class registry already exists and another dll is registered, reuse it.
; 222  :     if (FindRegPath(HKEY_CLASSES_ROOT, classRegistryPath))
; 223  :     {
; 224  :         if (GetRegString(HKEY_CLASSES_ROOT, InprocServer32RegistryPath, 0, (LPVOID)dllPath, _MAX_PATH))
; 225  :         {
; 226  :             CharLower((LPTSTR)dllPath);

	lea	rcx, QWORD PTR dllPath$[rbp-256]
	call	QWORD PTR __imp_CharLowerA

; 227  :             if (_tcscmp(dllPath, moduleName))

	lea	rax, QWORD PTR dllPath$[rbp-256]
	lea	r8, QWORD PTR moduleName$[rbp-256]
	sub	r8, rax
	npad	2
$LL116@RegisterAs:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN117@RegisterAs
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL116@RegisterAs
$LN117@RegisterAs:
	test	edx, edx
	je	$LN112@RegisterAs

; 228  :             {
; 229  :                 RegDeleteTree(HKEY_LOCAL_MACHINE, classRegistryPath);

	lea	rdx, QWORD PTR classRegistryPath$[rbp-256]
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegDeleteTreeA
$LN12@RegisterAs:

; 230  :                 // ASSERT(SUCCEEDED(result));
; 231  :                 newregentry = true;
; 232  :             }
; 233  :         }
; 234  :     }
; 235  :     else
; 236  :     {
; 237  :         newregentry = true;
; 238  :     }
; 239  : 
; 240  :     if (newregentry && SUCCEEDED(result))
; 241  :     {
; 242  :         REGISTRY_ELEMENT registryElements[] = {
; 243  :             {HKEY_CLASSES_ROOT, classRegistryPath, nullptr, asioDescriptor},

	lea	rax, QWORD PTR classRegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$19[rsp], -2147483648 ; ffffffff80000000H
	mov	QWORD PTR registryElements$19[rsp+8], rax
	lea	rsi, QWORD PTR registryElements$19[rsp+16]

; 244  :             {HKEY_CLASSES_ROOT, InprocServer32RegistryPath, nullptr, moduleName},

	lea	rax, QWORD PTR InprocServer32RegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$19[rsp+16], r12
	mov	QWORD PTR registryElements$19[rsp+40], rax

; 245  :             {HKEY_CLASSES_ROOT, InprocServer32RegistryPath, REGSTR_THREADINGMODEL, threadModel}
; 246  :         };
; 247  : 
; 248  :         for (int index = 0; (index < _countof(registryElements)) && SUCCEEDED(result); index++)

	mov	r14d, r12d
	lea	rax, QWORD PTR moduleName$[rbp-256]
	mov	QWORD PTR registryElements$19[rsp+24], r13
	mov	QWORD PTR registryElements$19[rbp-200], rax
	lea	rax, QWORD PTR InprocServer32RegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$19[rbp-184], rax
	lea	rax, OFFSET FLAT:??_C@_0P@FAEGJAHE@ThreadingModel@
	mov	QWORD PTR registryElements$19[rbp-176], rax
	lea	rax, OFFSET FLAT:??_C@_09OOLPICH@Apartment@
	mov	QWORD PTR registryElements$19[rbp-168], rax
	mov	QWORD PTR registryElements$19[rsp+32], -2147483648 ; ffffffff80000000H
	mov	QWORD PTR registryElements$19[rbp-208], r12
	mov	QWORD PTR registryElements$19[rbp-192], -2147483648 ; ffffffff80000000H
$LL4@RegisterAs:
	test	ebx, ebx
	js	$LN107@RegisterAs

; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	mov	rdx, QWORD PTR [rsi-8]
	lea	rax, QWORD PTR key$26[rbp-256]
	mov	rcx, QWORD PTR [rsi-16]
	xor	r9d, r9d

; 249  :         {
; 250  :             result = CreateRegistryKeyAndSetValue(

	mov	rdi, QWORD PTR [rsi+8]

; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	xor	r8d, r8d
	mov	QWORD PTR [rsp+64], r12
	mov	ebx, r12d
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], r12
	mov	DWORD PTR [rsp+40], 983103		; 000f003fH
	mov	DWORD PTR [rsp+32], r12d
	call	QWORD PTR __imp_RegCreateKeyExA

; 105  :     if (ret != ERROR_SUCCESS)

	test	eax, eax
	je	SHORT $LN75@RegisterAs
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	jg	SHORT $LN81@RegisterAs
	mov	ebx, eax
	jmp	SHORT $LN76@RegisterAs
$LN91@RegisterAs:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 87   :             RegCloseKey(key);

	mov	rcx, QWORD PTR key$27[rbp-256]
	call	QWORD PTR __imp_RegCloseKey
	jmp	SHORT $LN112@RegisterAs
$LN81@RegisterAs:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 108  :     }

	jmp	SHORT $LN76@RegisterAs
$LN75@RegisterAs:

; 109  :     else
; 110  :     {
; 111  :         if (data != nullptr)

	test	rdi, rdi
	je	SHORT $LN86@RegisterAs

; 112  :         {
; 113  :             ret = RegSetValueEx(key, valueName, 0, REG_SZ, (LPBYTE)data, (DWORD)((_tcslen(data) + 1) * sizeof(TCHAR)));

	mov	rax, -1
$LL115@RegisterAs:
	inc	rax
	cmp	BYTE PTR [rdi+rax], bl
	jne	SHORT $LL115@RegisterAs
	mov	rdx, QWORD PTR [rsi]
	inc	eax
	mov	rcx, QWORD PTR key$26[rbp-256]
	mov	r9d, 1
	mov	DWORD PTR [rsp+40], eax
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_RegSetValueExA
	mov	ebx, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN86@RegisterAs
	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
$LN86@RegisterAs:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 116  :         RegCloseKey(key);

	mov	rcx, QWORD PTR key$26[rbp-256]
	call	QWORD PTR __imp_RegCloseKey
$LN76@RegisterAs:

; 245  :             {HKEY_CLASSES_ROOT, InprocServer32RegistryPath, REGSTR_THREADINGMODEL, threadModel}
; 246  :         };
; 247  : 
; 248  :         for (int index = 0; (index < _countof(registryElements)) && SUCCEEDED(result); index++)

	inc	r14d
	add	rsi, 32					; 00000020H
	cmp	r14d, 3
	jb	$LL4@RegisterAs

; 251  :                 registryElements[index].RootKey,
; 252  :                 registryElements[index].KeyName,
; 253  :                 registryElements[index].ValueName,
; 254  :                 registryElements[index].Data
; 255  :             );
; 256  :         }
; 257  :     }
; 258  :     if (SUCCEEDED(result))

	test	ebx, ebx
	js	$LN107@RegisterAs
$LN112@RegisterAs:

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$22[rbp-256]
	mov	QWORD PTR subKey$22[rbp-256], r12
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	SHORT $LN18@RegisterAs

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$22[rbp-256]
	call	QWORD PTR __imp_RegCloseKey

; 58   :         LSTATUS status = RegOpenKeyEx(key, regPath, 0, KEY_ALL_ACCESS, &subKey);

	lea	rax, QWORD PTR subKey$24[rbp-256]
	mov	QWORD PTR subKey$24[rbp-256], r12
	mov	r9d, 983103				; 000f003fH
	mov	QWORD PTR [rsp+32], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR asioRegistryPath$[rbp-256]
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegOpenKeyExA

; 59   :         if (status == ERROR_SUCCESS)

	test	eax, eax
	jne	$LN63@RegisterAs

; 60   :         {
; 61   :             RegCloseKey(subKey);

	mov	rcx, QWORD PTR subKey$24[rbp-256]
	call	QWORD PTR __imp_RegCloseKey

; 259  :     {
; 260  :         // HKEY_LOCAL_MACHINE\SOFTWARE\ASIO
; 261  :         if (FindRegPath(HKEY_LOCAL_MACHINE, REGSTR_SOFTWAREASIO))
; 262  :         {
; 263  :             if (FindRegPath(HKEY_LOCAL_MACHINE, asioRegistryPath))
; 264  :             {
; 265  :                 result = HRESULT_FROM_WIN32(RegDeleteTree(HKEY_LOCAL_MACHINE, asioRegistryPath));

	lea	rdx, QWORD PTR asioRegistryPath$[rbp-256]
	mov	rcx, -2147483646			; ffffffff80000002H
	call	QWORD PTR __imp_RegDeleteTreeA
	mov	ebx, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN63@RegisterAs
$LN68@RegisterAs:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 276  :     if (SUCCEEDED(result))

	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
	jmp	SHORT $LN63@RegisterAs
$LN18@RegisterAs:

; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	mov	QWORD PTR [rsp+64], r12
	lea	rax, QWORD PTR key$25[rbp-256]
	mov	QWORD PTR [rsp+56], rax
	lea	rdx, OFFSET FLAT:??_C@_0O@KEDGEIPK@SOFTWARE?2ASIO@
	mov	QWORD PTR [rsp+48], r12
	xor	r9d, r9d
	mov	DWORD PTR [rsp+40], 983103		; 000f003fH
	xor	r8d, r8d
	mov	rcx, -2147483646			; ffffffff80000002H
	mov	DWORD PTR [rsp+32], r12d
	mov	ebx, r12d
	call	QWORD PTR __imp_RegCreateKeyExA

; 105  :     if (ret != ERROR_SUCCESS)

	test	eax, eax
	je	SHORT $LN62@RegisterAs
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	jg	SHORT $LN68@RegisterAs
	mov	ebx, eax
	jmp	SHORT $LN63@RegisterAs
$LN62@RegisterAs:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 116  :         RegCloseKey(key);

	mov	rcx, QWORD PTR key$25[rbp-256]
	call	QWORD PTR __imp_RegCloseKey
$LN63@RegisterAs:

; 276  :     if (SUCCEEDED(result))

	test	ebx, ebx
	js	$LN107@RegisterAs

; 277  :     {
; 278  :         REGISTRY_ELEMENT registryElements[] = {
; 279  :             {HKEY_LOCAL_MACHINE, asioRegistryPath, nullptr, nullptr},

	lea	rax, QWORD PTR asioRegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$20[rsp], -2147483646 ; ffffffff80000002H
	mov	QWORD PTR registryElements$20[rsp+8], rax
	lea	rsi, QWORD PTR registryElements$20[rsp+16]

; 280  :             {HKEY_LOCAL_MACHINE, asioRegistryPath, REGSTR_CLSID, clsid},

	lea	rax, QWORD PTR asioRegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$20[rsp+32], -2147483646 ; ffffffff80000002H
	mov	QWORD PTR registryElements$20[rsp+40], rax
	xorps	xmm0, xmm0
	lea	rax, OFFSET FLAT:??_C@_05GIBEAPNE@CLSID@
	movdqa	XMMWORD PTR registryElements$20[rsp+16], xmm0
	mov	QWORD PTR registryElements$20[rbp-208], rax

; 281  :             {HKEY_LOCAL_MACHINE, asioRegistryPath, REGSTR_DESCRIPTION, asioDescriptor}
; 282  :         };
; 283  : 
; 284  :         for (int index = 0; (index < _countof(registryElements)) && SUCCEEDED(result); index++)

	mov	r14d, r12d
	lea	rax, QWORD PTR clsid$[rbp-256]
	mov	QWORD PTR registryElements$20[rbp-192], -2147483646 ; ffffffff80000002H
	mov	QWORD PTR registryElements$20[rbp-200], rax
	lea	rax, QWORD PTR asioRegistryPath$[rbp-256]
	mov	QWORD PTR registryElements$20[rbp-184], rax
	lea	rax, OFFSET FLAT:??_C@_0M@OHKMKKDH@Description@
	mov	QWORD PTR registryElements$20[rbp-176], rax
	mov	QWORD PTR registryElements$20[rbp-168], r13
$LL7@RegisterAs:
	test	ebx, ebx
	js	$LN107@RegisterAs

; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	mov	rdx, QWORD PTR [rsi-8]
	lea	rax, QWORD PTR key$21[rbp-256]
	mov	rcx, QWORD PTR [rsi-16]
	xor	r9d, r9d

; 285  :         {
; 286  :             result = CreateRegistryKeyAndSetValue(

	mov	rdi, QWORD PTR [rsi+8]

; 104  :     ret = RegCreateKeyEx(rootKey, keyName, 0, nullptr, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, nullptr, &key, nullptr);

	xor	r8d, r8d
	mov	QWORD PTR [rsp+64], r12
	mov	ebx, r12d
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], r12
	mov	DWORD PTR [rsp+40], 983103		; 000f003fH
	mov	DWORD PTR [rsp+32], r12d
	call	QWORD PTR __imp_RegCreateKeyExA

; 105  :     if (ret != ERROR_SUCCESS)

	test	eax, eax
	je	SHORT $LN33@RegisterAs
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	jg	SHORT $LN39@RegisterAs
	mov	ebx, eax
	jmp	SHORT $LN34@RegisterAs
$LN39@RegisterAs:
	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 108  :     }

	jmp	SHORT $LN34@RegisterAs
$LN33@RegisterAs:

; 109  :     else
; 110  :     {
; 111  :         if (data != nullptr)

	test	rdi, rdi
	je	SHORT $LN44@RegisterAs

; 112  :         {
; 113  :             ret = RegSetValueEx(key, valueName, 0, REG_SZ, (LPBYTE)data, (DWORD)((_tcslen(data) + 1) * sizeof(TCHAR)));

	mov	rax, -1
$LL114@RegisterAs:
	inc	rax
	cmp	BYTE PTR [rdi+rax], bl
	jne	SHORT $LL114@RegisterAs
	mov	rdx, QWORD PTR [rsi]
	inc	eax
	mov	rcx, QWORD PTR key$21[rbp-256]
	mov	r9d, 1
	mov	DWORD PTR [rsp+40], eax
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_RegSetValueExA
	mov	ebx, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h

; 30274: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN44@RegisterAs
	movzx	ebx, ax
	or	ebx, -2147024896			; ffffffff80070000H
$LN44@RegisterAs:
; File G:\Github\microsoft\low-latency-audio\src\uac2-asio\Register.cpp

; 116  :         RegCloseKey(key);

	mov	rcx, QWORD PTR key$21[rbp-256]
	call	QWORD PTR __imp_RegCloseKey
$LN34@RegisterAs:

; 281  :             {HKEY_LOCAL_MACHINE, asioRegistryPath, REGSTR_DESCRIPTION, asioDescriptor}
; 282  :         };
; 283  : 
; 284  :         for (int index = 0; (index < _countof(registryElements)) && SUCCEEDED(result); index++)

	inc	r14d
	add	rsi, 32					; 00000020H
	cmp	r14d, 3
	jb	$LL7@RegisterAs

; 287  :                 registryElements[index].RootKey,
; 288  :                 registryElements[index].KeyName,
; 289  :                 registryElements[index].ValueName,
; 290  :                 registryElements[index].Data
; 291  :             );
; 292  :         }
; 293  :     }
; 294  : 
; 295  :     if (!SUCCEEDED(result))

	test	ebx, ebx
	jns	SHORT $LN22@RegisterAs
$LN107@RegisterAs:

; 296  :     {
; 297  :         UnregisterAsioDriver(clsId, dllName, regName);

	movaps	xmm0, XMMWORD PTR [r15]
	lea	rcx, QWORD PTR $T18[rbp-256]
	movdqa	XMMWORD PTR $T18[rbp-256], xmm0
	call	?UnregisterAsioDriver@@YAJU_GUID@@PEBD1@Z ; UnregisterAsioDriver
$LN22@RegisterAs:

; 298  :     }
; 299  : 
; 300  :     return result;

	mov	r14, QWORD PTR [rsp+1696]
	mov	eax, ebx
	mov	r13, QWORD PTR [rsp+1704]
	mov	rdi, QWORD PTR [rsp+1768]
	mov	rsi, QWORD PTR [rsp+1760]
$LN151@RegisterAs:
	mov	rbx, QWORD PTR [rsp+1752]
$LN1@RegisterAs:

; 301  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1712				; 000006b0H
	pop	r15
	pop	r12
	pop	rbp
	ret	0
?RegisterAsioDriver@@YAJU_GUID@@PEBD111@Z ENDP		; RegisterAsioDriver
_TEXT	ENDS
END
